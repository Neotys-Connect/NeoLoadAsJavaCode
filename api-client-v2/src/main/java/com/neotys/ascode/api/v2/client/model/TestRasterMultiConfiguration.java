/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.neotys.ascode.api.v2.client.model;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
/**
 * TestRasterMultiConfiguration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-04-02T07:51:59.064Z[GMT]")
public class TestRasterMultiConfiguration {
  @SerializedName("width")
  private Integer width = null;

  @SerializedName("height")
  private Integer height = null;

  @SerializedName("title")
  private String title = null;

  /**
   * The type of the generated graph. Can be PNG, TIFF or JPEG. Default is PNG.
   */
  @JsonAdapter(RasterTypeEnum.Adapter.class)
  public enum RasterTypeEnum {
    PNG("PNG"),
    TIFF("TIFF"),
    JPEG("JPEG");

    private String value;

    RasterTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static RasterTypeEnum fromValue(String text) {
      for (RasterTypeEnum b : RasterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<RasterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RasterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RasterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return RasterTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("rasterType")
  private RasterTypeEnum rasterType = null;

  @SerializedName("xAxisLabel")
  private String xAxisLabel = null;

  @SerializedName("yAxisLabel")
  private String yAxisLabel = null;

  @SerializedName("legend")
  private Boolean legend = null;

  @SerializedName("multiYAxis")
  private Boolean multiYAxis = null;

  /**
   * The theme of the graph. Default is TRANSPARENT.
   */
  @JsonAdapter(ThemeEnum.Adapter.class)
  public enum ThemeEnum {
    DARK("DARK"),
    LIGHT("LIGHT"),
    TRANSPARENT("TRANSPARENT");

    private String value;

    ThemeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ThemeEnum fromValue(String text) {
      for (ThemeEnum b : ThemeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ThemeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThemeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThemeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ThemeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("theme")
  private ThemeEnum theme = null;

  @SerializedName("resultIds")
  private Map<String, TestIdDefinition> resultIds = null;

  public TestRasterMultiConfiguration width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * The width of the generated graph.
   * @return width
  **/
  @Schema(example = "600", description = "The width of the generated graph.")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }

  public TestRasterMultiConfiguration height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * The height of the generated graph.
   * @return height
  **/
  @Schema(example = "200", description = "The height of the generated graph.")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }

  public TestRasterMultiConfiguration title(String title) {
    this.title = title;
    return this;
  }

   /**
   * The main title of the generated graph.
   * @return title
  **/
  @Schema(example = "My Test", description = "The main title of the generated graph.")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public TestRasterMultiConfiguration rasterType(RasterTypeEnum rasterType) {
    this.rasterType = rasterType;
    return this;
  }

   /**
   * The type of the generated graph. Can be PNG, TIFF or JPEG. Default is PNG.
   * @return rasterType
  **/
  @Schema(example = "PNG", description = "The type of the generated graph. Can be PNG, TIFF or JPEG. Default is PNG.")
  public RasterTypeEnum getRasterType() {
    return rasterType;
  }

  public void setRasterType(RasterTypeEnum rasterType) {
    this.rasterType = rasterType;
  }

  public TestRasterMultiConfiguration xAxisLabel(String xAxisLabel) {
    this.xAxisLabel = xAxisLabel;
    return this;
  }

   /**
   * The xAxis label of the generated graph.
   * @return xAxisLabel
  **/
  @Schema(example = "X Axis", description = "The xAxis label of the generated graph.")
  public String getXAxisLabel() {
    return xAxisLabel;
  }

  public void setXAxisLabel(String xAxisLabel) {
    this.xAxisLabel = xAxisLabel;
  }

  public TestRasterMultiConfiguration yAxisLabel(String yAxisLabel) {
    this.yAxisLabel = yAxisLabel;
    return this;
  }

   /**
   * The yAxis label of the generated graph.
   * @return yAxisLabel
  **/
  @Schema(example = "Y Axis", description = "The yAxis label of the generated graph.")
  public String getYAxisLabel() {
    return yAxisLabel;
  }

  public void setYAxisLabel(String yAxisLabel) {
    this.yAxisLabel = yAxisLabel;
  }

  public TestRasterMultiConfiguration legend(Boolean legend) {
    this.legend = legend;
    return this;
  }

   /**
   * If true the legend is displayed. Default is true.
   * @return legend
  **/
  @Schema(example = "true", description = "If true the legend is displayed. Default is true.")
  public Boolean isLegend() {
    return legend;
  }

  public void setLegend(Boolean legend) {
    this.legend = legend;
  }

  public TestRasterMultiConfiguration multiYAxis(Boolean multiYAxis) {
    this.multiYAxis = multiYAxis;
    return this;
  }

   /**
   * If true, display one axis per serie. Default is false.
   * @return multiYAxis
  **/
  @Schema(example = "true", description = "If true, display one axis per serie. Default is false.")
  public Boolean isMultiYAxis() {
    return multiYAxis;
  }

  public void setMultiYAxis(Boolean multiYAxis) {
    this.multiYAxis = multiYAxis;
  }

  public TestRasterMultiConfiguration theme(ThemeEnum theme) {
    this.theme = theme;
    return this;
  }

   /**
   * The theme of the graph. Default is TRANSPARENT.
   * @return theme
  **/
  @Schema(example = "DARK", description = "The theme of the graph. Default is TRANSPARENT.")
  public ThemeEnum getTheme() {
    return theme;
  }

  public void setTheme(ThemeEnum theme) {
    this.theme = theme;
  }

  public TestRasterMultiConfiguration resultIds(Map<String, TestIdDefinition> resultIds) {
    this.resultIds = resultIds;
    return this;
  }

  public TestRasterMultiConfiguration putResultIdsItem(String key, TestIdDefinition resultIdsItem) {
    if (this.resultIds == null) {
      this.resultIds = new HashMap<String, TestIdDefinition>();
    }
    this.resultIds.put(key, resultIdsItem);
    return this;
  }

   /**
   * Get resultIds
   * @return resultIds
  **/
  @Schema(example = "{\"d30fdcc2-319e-4be5-818e-f1978907a3ce\":{\"elementIds\":[{\"id\":\"all-requests\",\"statistics\":[\"AVG_DURATION\"]},{\"id\":\"b8bfc48e-b7ed-48f8-b5ea-404d3faf15cb\",\"statistics\":[\"AVG_DURATION\",\"ELEMENTS_PER_SECOND\"]}]},\"dbe589d4-a10c-48d1-999e-da1fafa5df28\":{\"elementIds\":[{\"id\":\"all-requests\",\"statistics\":[\"AVG_DURATION\"]}],\"counterIds\":[\"a4bed45a-06b2-48e1-94fd-3ea979e4f360\",\"b5be82ff-3563-4812-93a5-4ea888e4e254\"]}}", description = "")
  public Map<String, TestIdDefinition> getResultIds() {
    return resultIds;
  }

  public void setResultIds(Map<String, TestIdDefinition> resultIds) {
    this.resultIds = resultIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestRasterMultiConfiguration testRasterMultiConfiguration = (TestRasterMultiConfiguration) o;
    return Objects.equals(this.width, testRasterMultiConfiguration.width) &&
        Objects.equals(this.height, testRasterMultiConfiguration.height) &&
        Objects.equals(this.title, testRasterMultiConfiguration.title) &&
        Objects.equals(this.rasterType, testRasterMultiConfiguration.rasterType) &&
        Objects.equals(this.xAxisLabel, testRasterMultiConfiguration.xAxisLabel) &&
        Objects.equals(this.yAxisLabel, testRasterMultiConfiguration.yAxisLabel) &&
        Objects.equals(this.legend, testRasterMultiConfiguration.legend) &&
        Objects.equals(this.multiYAxis, testRasterMultiConfiguration.multiYAxis) &&
        Objects.equals(this.theme, testRasterMultiConfiguration.theme) &&
        Objects.equals(this.resultIds, testRasterMultiConfiguration.resultIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(width, height, title, rasterType, xAxisLabel, yAxisLabel, legend, multiYAxis, theme, resultIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestRasterMultiConfiguration {\n");
    
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    rasterType: ").append(toIndentedString(rasterType)).append("\n");
    sb.append("    xAxisLabel: ").append(toIndentedString(xAxisLabel)).append("\n");
    sb.append("    yAxisLabel: ").append(toIndentedString(yAxisLabel)).append("\n");
    sb.append("    legend: ").append(toIndentedString(legend)).append("\n");
    sb.append("    multiYAxis: ").append(toIndentedString(multiYAxis)).append("\n");
    sb.append("    theme: ").append(toIndentedString(theme)).append("\n");
    sb.append("    resultIds: ").append(toIndentedString(resultIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

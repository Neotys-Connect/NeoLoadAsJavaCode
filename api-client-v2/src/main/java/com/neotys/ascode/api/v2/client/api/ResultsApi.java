/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.neotys.ascode.api.v2.client.api;

import com.neotys.ascode.api.v2.client.ApiCallback;
import com.neotys.ascode.api.v2.client.ApiClient;
import com.neotys.ascode.api.v2.client.ApiException;
import com.neotys.ascode.api.v2.client.ApiResponse;
import com.neotys.ascode.api.v2.client.Configuration;
import com.neotys.ascode.api.v2.client.Pair;
import com.neotys.ascode.api.v2.client.ProgressRequestBody;
import com.neotys.ascode.api.v2.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.neotys.ascode.api.v2.client.model.ArrayOfElementDefinition;
import com.neotys.ascode.api.v2.client.model.ArrayOfEventDefinition;
import com.neotys.ascode.api.v2.client.model.ArrayOfSLAGlobalIndicatorDefinition;
import com.neotys.ascode.api.v2.client.model.ArrayOfSLAPerIntervalDefinition;
import com.neotys.ascode.api.v2.client.model.ArrayOfSLAPerTestDefinition;
import com.neotys.ascode.api.v2.client.model.ArrayOfTestDefinition;
import com.neotys.ascode.api.v2.client.model.CounterDefinition;
import com.neotys.ascode.api.v2.client.model.CounterDefinitionArray;
import com.neotys.ascode.api.v2.client.model.CounterValues;
import com.neotys.ascode.api.v2.client.model.ElementDefinition;
import com.neotys.ascode.api.v2.client.model.ElementValues;
import com.neotys.ascode.api.v2.client.model.EventType;
import java.io.File;
import com.neotys.ascode.api.v2.client.model.InlineResponse200;
import com.neotys.ascode.api.v2.client.model.MonitorPostRequest;
import com.neotys.ascode.api.v2.client.model.Percentiles;
import com.neotys.ascode.api.v2.client.model.Points;
import com.neotys.ascode.api.v2.client.model.Sla;
import com.neotys.ascode.api.v2.client.model.TestDefinition;
import com.neotys.ascode.api.v2.client.model.TestRasterConfiguration;
import com.neotys.ascode.api.v2.client.model.TestRasterMultiConfiguration;
import com.neotys.ascode.api.v2.client.model.TestResultStopRequest;
import com.neotys.ascode.api.v2.client.model.TestStatistics;
import com.neotys.ascode.api.v2.client.model.TestUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResultsApi {
    private ApiClient apiClient;

    public ResultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResultsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTestResult
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestResultCall(String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestResultValidateBeforeCall(String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling deleteTestResult(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTestResultCall(resultId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Deletes a test result
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTestResult(String resultId) throws ApiException {
        deleteTestResultWithHttpInfo(resultId);
    }

    /**
     * Deletes a test result
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTestResultWithHttpInfo(String resultId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestResultValidateBeforeCall(resultId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a test result (asynchronously)
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestResultAsync(String resultId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestResultValidateBeforeCall(resultId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTest
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCall(String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestValidateBeforeCall(String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTest(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestCall(resultId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result description
     * Provides a test result description using a unique test result identifier. Provides name, dates, owner ...
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return TestDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestDefinition getTest(String resultId) throws ApiException {
        ApiResponse<TestDefinition> resp = getTestWithHttpInfo(resultId);
        return resp.getData();
    }

    /**
     * Test result description
     * Provides a test result description using a unique test result identifier. Provides name, dates, owner ...
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;TestDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestDefinition> getTestWithHttpInfo(String resultId) throws ApiException {
        com.squareup.okhttp.Call call = getTestValidateBeforeCall(resultId, null, null);
        Type localVarReturnType = new TypeToken<TestDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result description (asynchronously)
     * Provides a test result description using a unique test result identifier. Provides name, dates, owner ...
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestAsync(String resultId, final ApiCallback<TestDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestValidateBeforeCall(resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElementDefinition
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementDefinitionCall(String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/elements/{elementId}"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestElementDefinitionValidateBeforeCall(String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestElementDefinition(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestElementDefinition(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestElementDefinitionCall(resultId, elementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result element definition
     * Provides a test result element definition.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ElementDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElementDefinition getTestElementDefinition(String resultId, String elementId) throws ApiException {
        ApiResponse<ElementDefinition> resp = getTestElementDefinitionWithHttpInfo(resultId, elementId);
        return resp.getData();
    }

    /**
     * Test result element definition
     * Provides a test result element definition.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;ElementDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElementDefinition> getTestElementDefinitionWithHttpInfo(String resultId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementDefinitionValidateBeforeCall(resultId, elementId, null, null);
        Type localVarReturnType = new TypeToken<ElementDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result element definition (asynchronously)
     * Provides a test result element definition.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementDefinitionAsync(String resultId, String elementId, final ApiCallback<ElementDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementDefinitionValidateBeforeCall(resultId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElementDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElements
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param category Category of the elements to return. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementsCall(String resultId, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/elements"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestElementsValidateBeforeCall(String resultId, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestElements(Async)");
        }
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getTestElements(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestElementsCall(resultId, category, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test elements
     * Provides the tests elements of a test result. The elements type must be provided.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param category Category of the elements to return. (required)
     * @return ArrayOfElementDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfElementDefinition getTestElements(String resultId, String category) throws ApiException {
        ApiResponse<ArrayOfElementDefinition> resp = getTestElementsWithHttpInfo(resultId, category);
        return resp.getData();
    }

    /**
     * Test elements
     * Provides the tests elements of a test result. The elements type must be provided.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param category Category of the elements to return. (required)
     * @return ApiResponse&lt;ArrayOfElementDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfElementDefinition> getTestElementsWithHttpInfo(String resultId, String category) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementsValidateBeforeCall(resultId, category, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfElementDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test elements (asynchronously)
     * Provides the tests elements of a test result. The elements type must be provided.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param category Category of the elements to return. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementsAsync(String resultId, String category, final ApiCallback<ArrayOfElementDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementsValidateBeforeCall(resultId, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfElementDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElementsPercentiles
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementsPercentilesCall(String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/elements/{elementId}/percentiles"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestElementsPercentilesValidateBeforeCall(String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestElementsPercentiles(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestElementsPercentiles(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestElementsPercentilesCall(resultId, elementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result percentiles transaction since the beginning of the test result
     * Provides the percentiles of a test result transaction.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return Percentiles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Percentiles getTestElementsPercentiles(String resultId, String elementId) throws ApiException {
        ApiResponse<Percentiles> resp = getTestElementsPercentilesWithHttpInfo(resultId, elementId);
        return resp.getData();
    }

    /**
     * Test result percentiles transaction since the beginning of the test result
     * Provides the percentiles of a test result transaction.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;Percentiles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Percentiles> getTestElementsPercentilesWithHttpInfo(String resultId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementsPercentilesValidateBeforeCall(resultId, elementId, null, null);
        Type localVarReturnType = new TypeToken<Percentiles>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result percentiles transaction since the beginning of the test result (asynchronously)
     * Provides the percentiles of a test result transaction.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementsPercentilesAsync(String resultId, String elementId, final ApiCallback<Percentiles> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementsPercentilesValidateBeforeCall(resultId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Percentiles>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElementsPoints
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).&lt;br/&gt; Example: AVG_DURATION,ELEMENTS_PER_SECOND (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementsPointsCall(String resultId, String elementId, String statistics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/elements/{elementId}/points"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (statistics != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("statistics", statistics));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestElementsPointsValidateBeforeCall(String resultId, String elementId, String statistics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestElementsPoints(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestElementsPoints(Async)");
        }
        // verify the required parameter 'statistics' is set
        if (statistics == null) {
            throw new ApiException("Missing the required parameter 'statistics' when calling getTestElementsPoints(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestElementsPointsCall(resultId, elementId, statistics, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test results elements points since the beginning of the test result
     * Provides all the points of a test result element for the selected statistics.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).&lt;br/&gt; Example: AVG_DURATION,ELEMENTS_PER_SECOND (required)
     * @return Points
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Points getTestElementsPoints(String resultId, String elementId, String statistics) throws ApiException {
        ApiResponse<Points> resp = getTestElementsPointsWithHttpInfo(resultId, elementId, statistics);
        return resp.getData();
    }

    /**
     * Test results elements points since the beginning of the test result
     * Provides all the points of a test result element for the selected statistics.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).&lt;br/&gt; Example: AVG_DURATION,ELEMENTS_PER_SECOND (required)
     * @return ApiResponse&lt;Points&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Points> getTestElementsPointsWithHttpInfo(String resultId, String elementId, String statistics) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementsPointsValidateBeforeCall(resultId, elementId, statistics, null, null);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test results elements points since the beginning of the test result (asynchronously)
     * Provides all the points of a test result element for the selected statistics.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).&lt;br/&gt; Example: AVG_DURATION,ELEMENTS_PER_SECOND (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementsPointsAsync(String resultId, String elementId, String statistics, final ApiCallback<Points> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementsPointsValidateBeforeCall(resultId, elementId, statistics, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElementsSla
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementsSlaCall(String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/elements/{elementId}/sla"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestElementsSlaValidateBeforeCall(String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestElementsSla(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestElementsSla(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestElementsSlaCall(resultId, elementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result elements SLA status since the beginning of the test result
     * Provides the SLA status of a test result element.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return Sla
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sla getTestElementsSla(String resultId, String elementId) throws ApiException {
        ApiResponse<Sla> resp = getTestElementsSlaWithHttpInfo(resultId, elementId);
        return resp.getData();
    }

    /**
     * Test result elements SLA status since the beginning of the test result
     * Provides the SLA status of a test result element.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;Sla&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sla> getTestElementsSlaWithHttpInfo(String resultId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementsSlaValidateBeforeCall(resultId, elementId, null, null);
        Type localVarReturnType = new TypeToken<Sla>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result elements SLA status since the beginning of the test result (asynchronously)
     * Provides the SLA status of a test result element.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementsSlaAsync(String resultId, String elementId, final ApiCallback<Sla> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementsSlaValidateBeforeCall(resultId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Sla>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElementsValues
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementsValuesCall(String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/elements/{elementId}/values"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestElementsValuesValidateBeforeCall(String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestElementsValues(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestElementsValues(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestElementsValuesCall(resultId, elementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result elements values
     * Provides the values of a test result element.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ElementValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElementValues getTestElementsValues(String resultId, String elementId) throws ApiException {
        ApiResponse<ElementValues> resp = getTestElementsValuesWithHttpInfo(resultId, elementId);
        return resp.getData();
    }

    /**
     * Test result elements values
     * Provides the values of a test result element.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;ElementValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElementValues> getTestElementsValuesWithHttpInfo(String resultId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementsValuesValidateBeforeCall(resultId, elementId, null, null);
        Type localVarReturnType = new TypeToken<ElementValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result elements values (asynchronously)
     * Provides the values of a test result element.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementsValuesAsync(String resultId, String elementId, final ApiCallback<ElementValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementsValuesValidateBeforeCall(resultId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElementValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestEvents
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param types The types of the events you expect to get. It will return all the types if the field is left empty. (Ctrl+click to select multiple values)  (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestEventsCall(String resultId, List<EventType> types, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/events"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (types != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "types", types));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestEventsValidateBeforeCall(String resultId, List<EventType> types, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestEvents(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestEventsCall(resultId, types, limit, offset, sort, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result events
     * List the events of the specified test result according to the method parameters. ___ *Sortable fields :*   - offset   - fullname   - code   - source 
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param types The types of the events you expect to get. It will return all the types if the field is left empty. (Ctrl+click to select multiple values)  (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @return ArrayOfEventDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfEventDefinition getTestEvents(String resultId, List<EventType> types, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<ArrayOfEventDefinition> resp = getTestEventsWithHttpInfo(resultId, types, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Test result events
     * List the events of the specified test result according to the method parameters. ___ *Sortable fields :*   - offset   - fullname   - code   - source 
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param types The types of the events you expect to get. It will return all the types if the field is left empty. (Ctrl+click to select multiple values)  (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @return ApiResponse&lt;ArrayOfEventDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfEventDefinition> getTestEventsWithHttpInfo(String resultId, List<EventType> types, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getTestEventsValidateBeforeCall(resultId, types, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfEventDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result events (asynchronously)
     * List the events of the specified test result according to the method parameters. ___ *Sortable fields :*   - offset   - fullname   - code   - source 
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param types The types of the events you expect to get. It will return all the types if the field is left empty. (Ctrl+click to select multiple values)  (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestEventsAsync(String resultId, List<EventType> types, Integer limit, Integer offset, String sort, final ApiCallback<ArrayOfEventDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestEventsValidateBeforeCall(resultId, types, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfEventDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestGraph
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestGraphCall(String resultId, TestRasterConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/graph"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png", "image/jpeg", "image/tiff", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestGraphValidateBeforeCall(String resultId, TestRasterConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestGraph(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestGraphCall(resultId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result Graph
     * Provides a graph from some stats of a test result.  Element statistics can be mixed with monitor statistics. Only limitation is around PERCENTILES_DURATION element statistic that cannot be mixed with other element statistics neither with monitor statistics. 
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param body  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getTestGraph(String resultId, TestRasterConfiguration body) throws ApiException {
        ApiResponse<File> resp = getTestGraphWithHttpInfo(resultId, body);
        return resp.getData();
    }

    /**
     * Test result Graph
     * Provides a graph from some stats of a test result.  Element statistics can be mixed with monitor statistics. Only limitation is around PERCENTILES_DURATION element statistic that cannot be mixed with other element statistics neither with monitor statistics. 
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getTestGraphWithHttpInfo(String resultId, TestRasterConfiguration body) throws ApiException {
        com.squareup.okhttp.Call call = getTestGraphValidateBeforeCall(resultId, body, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result Graph (asynchronously)
     * Provides a graph from some stats of a test result.  Element statistics can be mixed with monitor statistics. Only limitation is around PERCENTILES_DURATION element statistic that cannot be mixed with other element statistics neither with monitor statistics. 
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestGraphAsync(String resultId, TestRasterConfiguration body, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestGraphValidateBeforeCall(resultId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestMonitorDefinition
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorDefinitionCall(String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/monitors/{counterId}"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
            .replaceAll("\\{" + "counterId" + "\\}", apiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestMonitorDefinitionValidateBeforeCall(String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestMonitorDefinition(Async)");
        }
        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling getTestMonitorDefinition(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestMonitorDefinitionCall(resultId, counterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result counter definition
     * Provides the definition of a test result counter.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return CounterDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CounterDefinition getTestMonitorDefinition(String resultId, String counterId) throws ApiException {
        ApiResponse<CounterDefinition> resp = getTestMonitorDefinitionWithHttpInfo(resultId, counterId);
        return resp.getData();
    }

    /**
     * Test result counter definition
     * Provides the definition of a test result counter.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return ApiResponse&lt;CounterDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CounterDefinition> getTestMonitorDefinitionWithHttpInfo(String resultId, String counterId) throws ApiException {
        com.squareup.okhttp.Call call = getTestMonitorDefinitionValidateBeforeCall(resultId, counterId, null, null);
        Type localVarReturnType = new TypeToken<CounterDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result counter definition (asynchronously)
     * Provides the definition of a test result counter.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorDefinitionAsync(String resultId, String counterId, final ApiCallback<CounterDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestMonitorDefinitionValidateBeforeCall(resultId, counterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CounterDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestMonitors
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsCall(String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/monitors"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestMonitorsValidateBeforeCall(String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestMonitors(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestMonitorsCall(resultId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result monitors
     * Provides all the test result counters of all monitors for a test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return CounterDefinitionArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CounterDefinitionArray getTestMonitors(String resultId) throws ApiException {
        ApiResponse<CounterDefinitionArray> resp = getTestMonitorsWithHttpInfo(resultId);
        return resp.getData();
    }

    /**
     * Test result monitors
     * Provides all the test result counters of all monitors for a test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;CounterDefinitionArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CounterDefinitionArray> getTestMonitorsWithHttpInfo(String resultId) throws ApiException {
        com.squareup.okhttp.Call call = getTestMonitorsValidateBeforeCall(resultId, null, null);
        Type localVarReturnType = new TypeToken<CounterDefinitionArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result monitors (asynchronously)
     * Provides all the test result counters of all monitors for a test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsAsync(String resultId, final ApiCallback<CounterDefinitionArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestMonitorsValidateBeforeCall(resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CounterDefinitionArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestMonitorsPoints
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsPointsCall(String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/monitors/{counterId}/points"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
            .replaceAll("\\{" + "counterId" + "\\}", apiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestMonitorsPointsValidateBeforeCall(String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestMonitorsPoints(Async)");
        }
        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling getTestMonitorsPoints(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestMonitorsPointsCall(resultId, counterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result monitors points
     * Provides all the points of a test result counter. The values are the average on the specified interval.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return Points
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Points getTestMonitorsPoints(String resultId, String counterId) throws ApiException {
        ApiResponse<Points> resp = getTestMonitorsPointsWithHttpInfo(resultId, counterId);
        return resp.getData();
    }

    /**
     * Test result monitors points
     * Provides all the points of a test result counter. The values are the average on the specified interval.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return ApiResponse&lt;Points&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Points> getTestMonitorsPointsWithHttpInfo(String resultId, String counterId) throws ApiException {
        com.squareup.okhttp.Call call = getTestMonitorsPointsValidateBeforeCall(resultId, counterId, null, null);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result monitors points (asynchronously)
     * Provides all the points of a test result counter. The values are the average on the specified interval.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsPointsAsync(String resultId, String counterId, final ApiCallback<Points> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestMonitorsPointsValidateBeforeCall(resultId, counterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestMonitorsValues
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsValuesCall(String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/monitors/{counterId}/values"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
            .replaceAll("\\{" + "counterId" + "\\}", apiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestMonitorsValuesValidateBeforeCall(String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestMonitorsValues(Async)");
        }
        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling getTestMonitorsValues(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestMonitorsValuesCall(resultId, counterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result monitors values
     * Provides the values of a test result counter.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return CounterValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CounterValues getTestMonitorsValues(String resultId, String counterId) throws ApiException {
        ApiResponse<CounterValues> resp = getTestMonitorsValuesWithHttpInfo(resultId, counterId);
        return resp.getData();
    }

    /**
     * Test result monitors values
     * Provides the values of a test result counter.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return ApiResponse&lt;CounterValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CounterValues> getTestMonitorsValuesWithHttpInfo(String resultId, String counterId) throws ApiException {
        com.squareup.okhttp.Call call = getTestMonitorsValuesValidateBeforeCall(resultId, counterId, null, null);
        Type localVarReturnType = new TypeToken<CounterValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result monitors values (asynchronously)
     * Provides the values of a test result counter.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsValuesAsync(String resultId, String counterId, final ApiCallback<CounterValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestMonitorsValuesValidateBeforeCall(resultId, counterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CounterValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestMultiGraph
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestMultiGraphCall(TestRasterMultiConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/test-results/graph";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png", "image/jpeg", "image/tiff", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestMultiGraphValidateBeforeCall(TestRasterMultiConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getTestMultiGraphCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test results MultiGraph
     * Provides a graph from some stats of some tests result.
     * @param body  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getTestMultiGraph(TestRasterMultiConfiguration body) throws ApiException {
        ApiResponse<File> resp = getTestMultiGraphWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Test results MultiGraph
     * Provides a graph from some stats of some tests result.
     * @param body  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getTestMultiGraphWithHttpInfo(TestRasterMultiConfiguration body) throws ApiException {
        com.squareup.okhttp.Call call = getTestMultiGraphValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test results MultiGraph (asynchronously)
     * Provides a graph from some stats of some tests result.
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestMultiGraphAsync(TestRasterMultiConfiguration body, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestMultiGraphValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestSLAGlobalIndicators
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestSLAGlobalIndicatorsCall(String resultId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/slas/statistics"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestSLAGlobalIndicatorsValidateBeforeCall(String resultId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestSLAGlobalIndicators(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestSLAGlobalIndicatorsCall(resultId, status, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * SLAs global indicators
     * Provides the SLAs global indicators of the test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @return ArrayOfSLAGlobalIndicatorDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfSLAGlobalIndicatorDefinition getTestSLAGlobalIndicators(String resultId, String status) throws ApiException {
        ApiResponse<ArrayOfSLAGlobalIndicatorDefinition> resp = getTestSLAGlobalIndicatorsWithHttpInfo(resultId, status);
        return resp.getData();
    }

    /**
     * SLAs global indicators
     * Provides the SLAs global indicators of the test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @return ApiResponse&lt;ArrayOfSLAGlobalIndicatorDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfSLAGlobalIndicatorDefinition> getTestSLAGlobalIndicatorsWithHttpInfo(String resultId, String status) throws ApiException {
        com.squareup.okhttp.Call call = getTestSLAGlobalIndicatorsValidateBeforeCall(resultId, status, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfSLAGlobalIndicatorDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * SLAs global indicators (asynchronously)
     * Provides the SLAs global indicators of the test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestSLAGlobalIndicatorsAsync(String resultId, String status, final ApiCallback<ArrayOfSLAGlobalIndicatorDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestSLAGlobalIndicatorsValidateBeforeCall(resultId, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfSLAGlobalIndicatorDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestSLAPerInterval
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestSLAPerIntervalCall(String resultId, String status, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/slas/per-interval"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestSLAPerIntervalValidateBeforeCall(String resultId, String status, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestSLAPerInterval(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestSLAPerIntervalCall(resultId, status, category, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * SLAs per time interval
     * Provides the SLAs per time interval of a specific test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @return ArrayOfSLAPerIntervalDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfSLAPerIntervalDefinition getTestSLAPerInterval(String resultId, String status, String category) throws ApiException {
        ApiResponse<ArrayOfSLAPerIntervalDefinition> resp = getTestSLAPerIntervalWithHttpInfo(resultId, status, category);
        return resp.getData();
    }

    /**
     * SLAs per time interval
     * Provides the SLAs per time interval of a specific test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @return ApiResponse&lt;ArrayOfSLAPerIntervalDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfSLAPerIntervalDefinition> getTestSLAPerIntervalWithHttpInfo(String resultId, String status, String category) throws ApiException {
        com.squareup.okhttp.Call call = getTestSLAPerIntervalValidateBeforeCall(resultId, status, category, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfSLAPerIntervalDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * SLAs per time interval (asynchronously)
     * Provides the SLAs per time interval of a specific test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestSLAPerIntervalAsync(String resultId, String status, String category, final ApiCallback<ArrayOfSLAPerIntervalDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestSLAPerIntervalValidateBeforeCall(resultId, status, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfSLAPerIntervalDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestSLAPerTest
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestSLAPerTestCall(String resultId, String status, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/slas/per-test"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestSLAPerTestValidateBeforeCall(String resultId, String status, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestSLAPerTest(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestSLAPerTestCall(resultId, status, category, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * SLAs per test
     * Provides the SLAs per test of a specific test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @return ArrayOfSLAPerTestDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfSLAPerTestDefinition getTestSLAPerTest(String resultId, String status, String category) throws ApiException {
        ApiResponse<ArrayOfSLAPerTestDefinition> resp = getTestSLAPerTestWithHttpInfo(resultId, status, category);
        return resp.getData();
    }

    /**
     * SLAs per test
     * Provides the SLAs per test of a specific test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @return ApiResponse&lt;ArrayOfSLAPerTestDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfSLAPerTestDefinition> getTestSLAPerTestWithHttpInfo(String resultId, String status, String category) throws ApiException {
        com.squareup.okhttp.Call call = getTestSLAPerTestValidateBeforeCall(resultId, status, category, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfSLAPerTestDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * SLAs per test (asynchronously)
     * Provides the SLAs per test of a specific test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestSLAPerTestAsync(String resultId, String status, String category, final ApiCallback<ArrayOfSLAPerTestDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestSLAPerTestValidateBeforeCall(resultId, status, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfSLAPerTestDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestStatistics
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestStatisticsCall(String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/statistics"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestStatisticsValidateBeforeCall(String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestStatistics(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestStatisticsCall(resultId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result main statistics
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a test result, those are average for the all test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return TestStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestStatistics getTestStatistics(String resultId) throws ApiException {
        ApiResponse<TestStatistics> resp = getTestStatisticsWithHttpInfo(resultId);
        return resp.getData();
    }

    /**
     * Test result main statistics
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a test result, those are average for the all test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;TestStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestStatistics> getTestStatisticsWithHttpInfo(String resultId) throws ApiException {
        com.squareup.okhttp.Call call = getTestStatisticsValidateBeforeCall(resultId, null, null);
        Type localVarReturnType = new TypeToken<TestStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result main statistics (asynchronously)
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a test result, those are average for the all test result.
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestStatisticsAsync(String resultId, final ApiCallback<TestStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestStatisticsValidateBeforeCall(resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTests
     * @param status Returns only the test results with the specified status. (optional)
     * @param project Project name. Returns only the test results of the specified project. (optional)
     * @param author The author of the test result. Returns only the test results launched by the specified author. (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param fields Comma-separated list of fields to include in the json test result definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestsCall(String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/test-results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("project", project));
        if (author != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("author", author));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sort != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (pretty != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pretty", pretty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestsValidateBeforeCall(String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getTestsCall(status, project, author, limit, offset, sort, fields, pretty, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lists test results
     * Lists the test results of the Account according to the method parameters. ___ *Sortable fields :*   - name   - project   - startDate   - qualityStatus 
     * @param status Returns only the test results with the specified status. (optional)
     * @param project Project name. Returns only the test results of the specified project. (optional)
     * @param author The author of the test result. Returns only the test results launched by the specified author. (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param fields Comma-separated list of fields to include in the json test result definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @return ArrayOfTestDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfTestDefinition getTests(String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty) throws ApiException {
        ApiResponse<ArrayOfTestDefinition> resp = getTestsWithHttpInfo(status, project, author, limit, offset, sort, fields, pretty);
        return resp.getData();
    }

    /**
     * Lists test results
     * Lists the test results of the Account according to the method parameters. ___ *Sortable fields :*   - name   - project   - startDate   - qualityStatus 
     * @param status Returns only the test results with the specified status. (optional)
     * @param project Project name. Returns only the test results of the specified project. (optional)
     * @param author The author of the test result. Returns only the test results launched by the specified author. (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param fields Comma-separated list of fields to include in the json test result definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @return ApiResponse&lt;ArrayOfTestDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfTestDefinition> getTestsWithHttpInfo(String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty) throws ApiException {
        com.squareup.okhttp.Call call = getTestsValidateBeforeCall(status, project, author, limit, offset, sort, fields, pretty, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfTestDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists test results (asynchronously)
     * Lists the test results of the Account according to the method parameters. ___ *Sortable fields :*   - name   - project   - startDate   - qualityStatus 
     * @param status Returns only the test results with the specified status. (optional)
     * @param project Project name. Returns only the test results of the specified project. (optional)
     * @param author The author of the test result. Returns only the test results launched by the specified author. (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param fields Comma-separated list of fields to include in the json test result definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestsAsync(String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty, final ApiCallback<ArrayOfTestDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestsValidateBeforeCall(status, project, author, limit, offset, sort, fields, pretty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfTestDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTestMonitors
     * @param body List of custom monitors (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTestMonitorsCall(MonitorPostRequest body, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/monitors"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTestMonitorsValidateBeforeCall(MonitorPostRequest body, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postTestMonitors(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling postTestMonitors(Async)");
        }
        
        com.squareup.okhttp.Call call = postTestMonitorsCall(body, resultId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create custom monitors
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;&#x27;/&#x27; character is not allowed in path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     * @param body List of custom monitors (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postTestMonitors(MonitorPostRequest body, String resultId) throws ApiException {
        postTestMonitorsWithHttpInfo(body, resultId);
    }

    /**
     * Create custom monitors
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;&#x27;/&#x27; character is not allowed in path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     * @param body List of custom monitors (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postTestMonitorsWithHttpInfo(MonitorPostRequest body, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = postTestMonitorsValidateBeforeCall(body, resultId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create custom monitors (asynchronously)
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;&#x27;/&#x27; character is not allowed in path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     * @param body List of custom monitors (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTestMonitorsAsync(MonitorPostRequest body, String resultId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTestMonitorsValidateBeforeCall(body, resultId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for stopTestResult
     * @param body  (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopTestResultCall(TestResultStopRequest body, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}/stop"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopTestResultValidateBeforeCall(TestResultStopRequest body, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling stopTestResult(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling stopTestResult(Async)");
        }
        
        com.squareup.okhttp.Call call = stopTestResultCall(body, resultId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Stop a running test result
     * Stop the running test result with the specified id
     * @param body  (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 stopTestResult(TestResultStopRequest body, String resultId) throws ApiException {
        ApiResponse<InlineResponse200> resp = stopTestResultWithHttpInfo(body, resultId);
        return resp.getData();
    }

    /**
     * Stop a running test result
     * Stop the running test result with the specified id
     * @param body  (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> stopTestResultWithHttpInfo(TestResultStopRequest body, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = stopTestResultValidateBeforeCall(body, resultId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop a running test result (asynchronously)
     * Stop the running test result with the specified id
     * @param body  (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopTestResultAsync(TestResultStopRequest body, String resultId, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopTestResultValidateBeforeCall(body, resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTest
     * @param body  (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTestCall(TestUpdateRequest body, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/test-results/{resultId}"
            .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestValidateBeforeCall(TestUpdateRequest body, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTest(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling updateTest(Async)");
        }
        
        com.squareup.okhttp.Call call = updateTestCall(body, resultId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a test result
     * Updates a test result with new name, description or quality status.
     * @param body  (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return TestDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestDefinition updateTest(TestUpdateRequest body, String resultId) throws ApiException {
        ApiResponse<TestDefinition> resp = updateTestWithHttpInfo(body, resultId);
        return resp.getData();
    }

    /**
     * Update a test result
     * Updates a test result with new name, description or quality status.
     * @param body  (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;TestDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestDefinition> updateTestWithHttpInfo(TestUpdateRequest body, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = updateTestValidateBeforeCall(body, resultId, null, null);
        Type localVarReturnType = new TypeToken<TestDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a test result (asynchronously)
     * Updates a test result with new name, description or quality status.
     * @param body  (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestAsync(TestUpdateRequest body, String resultId, final ApiCallback<TestDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestValidateBeforeCall(body, resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

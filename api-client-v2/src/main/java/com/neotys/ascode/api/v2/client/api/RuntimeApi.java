/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.neotys.ascode.api.v2.client.api;

import com.neotys.ascode.api.v2.client.ApiCallback;
import com.neotys.ascode.api.v2.client.ApiClient;
import com.neotys.ascode.api.v2.client.ApiException;
import com.neotys.ascode.api.v2.client.ApiResponse;
import com.neotys.ascode.api.v2.client.Configuration;
import com.neotys.ascode.api.v2.client.Pair;
import com.neotys.ascode.api.v2.client.ProgressRequestBody;
import com.neotys.ascode.api.v2.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.neotys.ascode.api.v2.client.model.ProjectDefinition;
import com.neotys.ascode.api.v2.client.model.RunTestDefinition;
import com.neotys.ascode.api.v2.client.model.TestSettingsCreate;
import com.neotys.ascode.api.v2.client.model.TestSettingsCreated;
import com.neotys.ascode.api.v2.client.model.TestSettingsDefinition;
import com.neotys.ascode.api.v2.client.model.TestSettingsDefinitionList;
import com.neotys.ascode.api.v2.client.model.TestSettingsUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RuntimeApi {
    private ApiClient apiClient;

    public RuntimeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RuntimeApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTest
     * @param testId Unique identifier representing a specific test. (required)
     * @param deleteResults Delete also test results linked to the test. Default is true. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestCall(String testId, String deleteResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (deleteResults != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("deleteResults", deleteResults));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestValidateBeforeCall(String testId, String deleteResults, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling deleteTest(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteTestCall(testId, deleteResults, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a test
     * Delete the test with the specified id
     * @param testId Unique identifier representing a specific test. (required)
     * @param deleteResults Delete also test results linked to the test. Default is true. (optional)
     * @return TestSettingsDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSettingsDefinition deleteTest(String testId, String deleteResults) throws ApiException {
        ApiResponse<TestSettingsDefinition> resp = deleteTestWithHttpInfo(testId, deleteResults);
        return resp.getData();
    }

    /**
     * Delete a test
     * Delete the test with the specified id
     * @param testId Unique identifier representing a specific test. (required)
     * @param deleteResults Delete also test results linked to the test. Default is true. (optional)
     * @return ApiResponse&lt;TestSettingsDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSettingsDefinition> deleteTestWithHttpInfo(String testId, String deleteResults) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestValidateBeforeCall(testId, deleteResults, null, null);
        Type localVarReturnType = new TypeToken<TestSettingsDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a test (asynchronously)
     * Delete the test with the specified id
     * @param testId Unique identifier representing a specific test. (required)
     * @param deleteResults Delete also test results linked to the test. Default is true. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestAsync(String testId, String deleteResults, final ApiCallback<TestSettingsDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestValidateBeforeCall(testId, deleteResults, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSettingsDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestList
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestListCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestListValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = getTestListCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a test list
     * Get the test list
     * @return TestSettingsDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSettingsDefinitionList getTestList() throws ApiException {
        ApiResponse<TestSettingsDefinitionList> resp = getTestListWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get a test list
     * Get the test list
     * @return ApiResponse&lt;TestSettingsDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSettingsDefinitionList> getTestListWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getTestListValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<TestSettingsDefinitionList>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a test list (asynchronously)
     * Get the test list
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestListAsync(final ApiCallback<TestSettingsDefinitionList> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestListValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSettingsDefinitionList>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestSettings
     * @param testId Unique identifier representing a specific test. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestSettingsCall(String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestSettingsValidateBeforeCall(String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestSettings(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestSettingsCall(testId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get a test
     * Get the test
     * @param testId Unique identifier representing a specific test. (required)
     * @return TestSettingsDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSettingsDefinition getTestSettings(String testId) throws ApiException {
        ApiResponse<TestSettingsDefinition> resp = getTestSettingsWithHttpInfo(testId);
        return resp.getData();
    }

    /**
     * Get a test
     * Get the test
     * @param testId Unique identifier representing a specific test. (required)
     * @return ApiResponse&lt;TestSettingsDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSettingsDefinition> getTestSettingsWithHttpInfo(String testId) throws ApiException {
        com.squareup.okhttp.Call call = getTestSettingsValidateBeforeCall(testId, null, null);
        Type localVarReturnType = new TypeToken<TestSettingsDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get a test (asynchronously)
     * Get the test
     * @param testId Unique identifier representing a specific test. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestSettingsAsync(String testId, final ApiCallback<TestSettingsDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestSettingsValidateBeforeCall(testId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSettingsDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestsRun
     * @param testId Unique identifier representing a specific test. (required)
     * @param testResultName The name of the test result (required)
     * @param testResultDescription The description of the test result (optional)
     * @param asCode The comma-separated as-code files to use for the test. Those files must be part of the uploaded project. (optional)
     * @param reservationId The reservation identifier to use for the test that can be retrieved from the NeoLoad Web reservation calendar URL. If the reservation mode is enabled and \&quot;reservationId\&quot; value is defined, \&quot;reservationDuration\&quot;, \&quot;reservationWebVUs\&quot; and \&quot;reservationSAPVUs\&quot; values will be ignored, otherwise if the reservation mode is disabled the value will be ignored. (optional)
     * @param reservationDuration The duration of the reservation for the test. If the reservation mode is enabled, this value or \&quot;reservationDuration\&quot;, \&quot;reservationWebVUs\&quot;, \&quot;reservationSAPVUs\&quot; must be defined, otherwise if the reservation mode is disabled the value will be ignored. The value (in seconds) is optional when the reservation mode is enabled and ignored when reservationId value is defined or if the reservation mode is disabled. The default value is the selected scenario duration + 1200 seconds (20 minutes). All reserved resources will be released when the test ends. (optional)
     * @param reservationWebVUs The number of Web Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param reservationSAPVUs The number of SAP Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param reservationCitrixVUs The number of Citrix Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param publishTestResult When \&quot;true\&quot; and the project is a collaborative project (other than git) then the test result is published onto the server. If empty, the default value is \&quot;false\&quot;. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestsRunCall(String testId, String testResultName, String testResultDescription, String asCode, String reservationId, Long reservationDuration, Integer reservationWebVUs, Integer reservationSAPVUs, Integer reservationCitrixVUs, Boolean publishTestResult, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}/start"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (testResultName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("testResultName", testResultName));
        if (testResultDescription != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("testResultDescription", testResultDescription));
        if (asCode != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("asCode", asCode));
        if (reservationId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reservationId", reservationId));
        if (reservationDuration != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reservationDuration", reservationDuration));
        if (reservationWebVUs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reservationWebVUs", reservationWebVUs));
        if (reservationSAPVUs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reservationSAPVUs", reservationSAPVUs));
        if (reservationCitrixVUs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("reservationCitrixVUs", reservationCitrixVUs));
        if (publishTestResult != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("publishTestResult", publishTestResult));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestsRunValidateBeforeCall(String testId, String testResultName, String testResultDescription, String asCode, String reservationId, Long reservationDuration, Integer reservationWebVUs, Integer reservationSAPVUs, Integer reservationCitrixVUs, Boolean publishTestResult, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestsRun(Async)");
        }
        // verify the required parameter 'testResultName' is set
        if (testResultName == null) {
            throw new ApiException("Missing the required parameter 'testResultName' when calling getTestsRun(Async)");
        }
        
        com.squareup.okhttp.Call call = getTestsRunCall(testId, testResultName, testResultDescription, asCode, reservationId, reservationDuration, reservationWebVUs, reservationSAPVUs, reservationCitrixVUs, publishTestResult, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Starts a test
     * Starts a test of the Account according to the method parameters.
     * @param testId Unique identifier representing a specific test. (required)
     * @param testResultName The name of the test result (required)
     * @param testResultDescription The description of the test result (optional)
     * @param asCode The comma-separated as-code files to use for the test. Those files must be part of the uploaded project. (optional)
     * @param reservationId The reservation identifier to use for the test that can be retrieved from the NeoLoad Web reservation calendar URL. If the reservation mode is enabled and \&quot;reservationId\&quot; value is defined, \&quot;reservationDuration\&quot;, \&quot;reservationWebVUs\&quot; and \&quot;reservationSAPVUs\&quot; values will be ignored, otherwise if the reservation mode is disabled the value will be ignored. (optional)
     * @param reservationDuration The duration of the reservation for the test. If the reservation mode is enabled, this value or \&quot;reservationDuration\&quot;, \&quot;reservationWebVUs\&quot;, \&quot;reservationSAPVUs\&quot; must be defined, otherwise if the reservation mode is disabled the value will be ignored. The value (in seconds) is optional when the reservation mode is enabled and ignored when reservationId value is defined or if the reservation mode is disabled. The default value is the selected scenario duration + 1200 seconds (20 minutes). All reserved resources will be released when the test ends. (optional)
     * @param reservationWebVUs The number of Web Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param reservationSAPVUs The number of SAP Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param reservationCitrixVUs The number of Citrix Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param publishTestResult When \&quot;true\&quot; and the project is a collaborative project (other than git) then the test result is published onto the server. If empty, the default value is \&quot;false\&quot;. (optional)
     * @return RunTestDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RunTestDefinition getTestsRun(String testId, String testResultName, String testResultDescription, String asCode, String reservationId, Long reservationDuration, Integer reservationWebVUs, Integer reservationSAPVUs, Integer reservationCitrixVUs, Boolean publishTestResult) throws ApiException {
        ApiResponse<RunTestDefinition> resp = getTestsRunWithHttpInfo(testId, testResultName, testResultDescription, asCode, reservationId, reservationDuration, reservationWebVUs, reservationSAPVUs, reservationCitrixVUs, publishTestResult);
        return resp.getData();
    }

    /**
     * Starts a test
     * Starts a test of the Account according to the method parameters.
     * @param testId Unique identifier representing a specific test. (required)
     * @param testResultName The name of the test result (required)
     * @param testResultDescription The description of the test result (optional)
     * @param asCode The comma-separated as-code files to use for the test. Those files must be part of the uploaded project. (optional)
     * @param reservationId The reservation identifier to use for the test that can be retrieved from the NeoLoad Web reservation calendar URL. If the reservation mode is enabled and \&quot;reservationId\&quot; value is defined, \&quot;reservationDuration\&quot;, \&quot;reservationWebVUs\&quot; and \&quot;reservationSAPVUs\&quot; values will be ignored, otherwise if the reservation mode is disabled the value will be ignored. (optional)
     * @param reservationDuration The duration of the reservation for the test. If the reservation mode is enabled, this value or \&quot;reservationDuration\&quot;, \&quot;reservationWebVUs\&quot;, \&quot;reservationSAPVUs\&quot; must be defined, otherwise if the reservation mode is disabled the value will be ignored. The value (in seconds) is optional when the reservation mode is enabled and ignored when reservationId value is defined or if the reservation mode is disabled. The default value is the selected scenario duration + 1200 seconds (20 minutes). All reserved resources will be released when the test ends. (optional)
     * @param reservationWebVUs The number of Web Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param reservationSAPVUs The number of SAP Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param reservationCitrixVUs The number of Citrix Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param publishTestResult When \&quot;true\&quot; and the project is a collaborative project (other than git) then the test result is published onto the server. If empty, the default value is \&quot;false\&quot;. (optional)
     * @return ApiResponse&lt;RunTestDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RunTestDefinition> getTestsRunWithHttpInfo(String testId, String testResultName, String testResultDescription, String asCode, String reservationId, Long reservationDuration, Integer reservationWebVUs, Integer reservationSAPVUs, Integer reservationCitrixVUs, Boolean publishTestResult) throws ApiException {
        com.squareup.okhttp.Call call = getTestsRunValidateBeforeCall(testId, testResultName, testResultDescription, asCode, reservationId, reservationDuration, reservationWebVUs, reservationSAPVUs, reservationCitrixVUs, publishTestResult, null, null);
        Type localVarReturnType = new TypeToken<RunTestDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Starts a test (asynchronously)
     * Starts a test of the Account according to the method parameters.
     * @param testId Unique identifier representing a specific test. (required)
     * @param testResultName The name of the test result (required)
     * @param testResultDescription The description of the test result (optional)
     * @param asCode The comma-separated as-code files to use for the test. Those files must be part of the uploaded project. (optional)
     * @param reservationId The reservation identifier to use for the test that can be retrieved from the NeoLoad Web reservation calendar URL. If the reservation mode is enabled and \&quot;reservationId\&quot; value is defined, \&quot;reservationDuration\&quot;, \&quot;reservationWebVUs\&quot; and \&quot;reservationSAPVUs\&quot; values will be ignored, otherwise if the reservation mode is disabled the value will be ignored. (optional)
     * @param reservationDuration The duration of the reservation for the test. If the reservation mode is enabled, this value or \&quot;reservationDuration\&quot;, \&quot;reservationWebVUs\&quot;, \&quot;reservationSAPVUs\&quot; must be defined, otherwise if the reservation mode is disabled the value will be ignored. The value (in seconds) is optional when the reservation mode is enabled and ignored when reservationId value is defined or if the reservation mode is disabled. The default value is the selected scenario duration + 1200 seconds (20 minutes). All reserved resources will be released when the test ends. (optional)
     * @param reservationWebVUs The number of Web Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param reservationSAPVUs The number of SAP Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param reservationCitrixVUs The number of Citrix Virtual Users to be reserved for the test. The value is optional when the reservation mode is enabled and ignored when \&quot;reservationId\&quot; value is defined or if the reservation mode is disabled. (optional)
     * @param publishTestResult When \&quot;true\&quot; and the project is a collaborative project (other than git) then the test result is published onto the server. If empty, the default value is \&quot;false\&quot;. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestsRunAsync(String testId, String testResultName, String testResultDescription, String asCode, String reservationId, Long reservationDuration, Integer reservationWebVUs, Integer reservationSAPVUs, Integer reservationCitrixVUs, Boolean publishTestResult, final ApiCallback<RunTestDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestsRunValidateBeforeCall(testId, testResultName, testResultDescription, asCode, reservationId, reservationDuration, reservationWebVUs, reservationSAPVUs, reservationCitrixVUs, publishTestResult, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RunTestDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for patchTest
     * @param testId Unique identifier representing a specific test. (required)
     * @param body The fields to update. No field is required, only those supplied will be updated. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call patchTestCall(String testId, TestSettingsUpdate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call patchTestValidateBeforeCall(String testId, TestSettingsUpdate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling patchTest(Async)");
        }
        
        com.squareup.okhttp.Call call = patchTestCall(testId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Partially update a test
     * Update only the specified fields of the test
     * @param testId Unique identifier representing a specific test. (required)
     * @param body The fields to update. No field is required, only those supplied will be updated. (optional)
     * @return TestSettingsDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSettingsDefinition patchTest(String testId, TestSettingsUpdate body) throws ApiException {
        ApiResponse<TestSettingsDefinition> resp = patchTestWithHttpInfo(testId, body);
        return resp.getData();
    }

    /**
     * Partially update a test
     * Update only the specified fields of the test
     * @param testId Unique identifier representing a specific test. (required)
     * @param body The fields to update. No field is required, only those supplied will be updated. (optional)
     * @return ApiResponse&lt;TestSettingsDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSettingsDefinition> patchTestWithHttpInfo(String testId, TestSettingsUpdate body) throws ApiException {
        com.squareup.okhttp.Call call = patchTestValidateBeforeCall(testId, body, null, null);
        Type localVarReturnType = new TypeToken<TestSettingsDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Partially update a test (asynchronously)
     * Update only the specified fields of the test
     * @param testId Unique identifier representing a specific test. (required)
     * @param body The fields to update. No field is required, only those supplied will be updated. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call patchTestAsync(String testId, TestSettingsUpdate body, final ApiCallback<TestSettingsDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = patchTestValidateBeforeCall(testId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSettingsDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postCreateTest
     * @param body  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postCreateTestCall(TestSettingsCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postCreateTestValidateBeforeCall(TestSettingsCreate body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postCreateTest(Async)");
        }
        
        com.squareup.okhttp.Call call = postCreateTestCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a new test
     * Create a new test with the specified name
     * @param body  (required)
     * @return TestSettingsCreated
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSettingsCreated postCreateTest(TestSettingsCreate body) throws ApiException {
        ApiResponse<TestSettingsCreated> resp = postCreateTestWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a new test
     * Create a new test with the specified name
     * @param body  (required)
     * @return ApiResponse&lt;TestSettingsCreated&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSettingsCreated> postCreateTestWithHttpInfo(TestSettingsCreate body) throws ApiException {
        com.squareup.okhttp.Call call = postCreateTestValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<TestSettingsCreated>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a new test (asynchronously)
     * Create a new test with the specified name
     * @param body  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postCreateTestAsync(TestSettingsCreate body, final ApiCallback<TestSettingsCreated> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postCreateTestValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSettingsCreated>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postUploadProject
     * @param file  (required)
     * @param testId Unique identifier representing a specific test. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postUploadProjectCall(File file, String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}/project"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null)
        localVarFormParams.put("file", file);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postUploadProjectValidateBeforeCall(File file, String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling postUploadProject(Async)");
        }
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling postUploadProject(Async)");
        }
        
        com.squareup.okhttp.Call call = postUploadProjectCall(file, testId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Uploads a NeoLoad project zip file or a standalone as code file
     * Uploads a NeoLoad project of the account corresponding to the parameters. The maximum size file is 250 MB
     * @param file  (required)
     * @param testId Unique identifier representing a specific test. (required)
     * @return ProjectDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ProjectDefinition postUploadProject(File file, String testId) throws ApiException {
        ApiResponse<ProjectDefinition> resp = postUploadProjectWithHttpInfo(file, testId);
        return resp.getData();
    }

    /**
     * Uploads a NeoLoad project zip file or a standalone as code file
     * Uploads a NeoLoad project of the account corresponding to the parameters. The maximum size file is 250 MB
     * @param file  (required)
     * @param testId Unique identifier representing a specific test. (required)
     * @return ApiResponse&lt;ProjectDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ProjectDefinition> postUploadProjectWithHttpInfo(File file, String testId) throws ApiException {
        com.squareup.okhttp.Call call = postUploadProjectValidateBeforeCall(file, testId, null, null);
        Type localVarReturnType = new TypeToken<ProjectDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Uploads a NeoLoad project zip file or a standalone as code file (asynchronously)
     * Uploads a NeoLoad project of the account corresponding to the parameters. The maximum size file is 250 MB
     * @param file  (required)
     * @param testId Unique identifier representing a specific test. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postUploadProjectAsync(File file, String testId, final ApiCallback<ProjectDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postUploadProjectValidateBeforeCall(file, testId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ProjectDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putTest
     * @param body The fields to update. All fields are required and will be updated. (required)
     * @param testId Unique identifier representing a specific test. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call putTestCall(TestSettingsUpdate body, String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call putTestValidateBeforeCall(TestSettingsUpdate body, String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putTest(Async)");
        }
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling putTest(Async)");
        }
        
        com.squareup.okhttp.Call call = putTestCall(body, testId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fully update a test
     * Update all fields of the test
     * @param body The fields to update. All fields are required and will be updated. (required)
     * @param testId Unique identifier representing a specific test. (required)
     * @return TestSettingsDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestSettingsDefinition putTest(TestSettingsUpdate body, String testId) throws ApiException {
        ApiResponse<TestSettingsDefinition> resp = putTestWithHttpInfo(body, testId);
        return resp.getData();
    }

    /**
     * Fully update a test
     * Update all fields of the test
     * @param body The fields to update. All fields are required and will be updated. (required)
     * @param testId Unique identifier representing a specific test. (required)
     * @return ApiResponse&lt;TestSettingsDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestSettingsDefinition> putTestWithHttpInfo(TestSettingsUpdate body, String testId) throws ApiException {
        com.squareup.okhttp.Call call = putTestValidateBeforeCall(body, testId, null, null);
        Type localVarReturnType = new TypeToken<TestSettingsDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fully update a test (asynchronously)
     * Update all fields of the test
     * @param body The fields to update. All fields are required and will be updated. (required)
     * @param testId Unique identifier representing a specific test. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call putTestAsync(TestSettingsUpdate body, String testId, final ApiCallback<TestSettingsDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = putTestValidateBeforeCall(body, testId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestSettingsDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}

/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.ascode.swagger.client.api;

import com.neotys.ascode.swagger.client.ApiClient;
import com.neotys.ascode.swagger.client.ApiException;
import com.neotys.ascode.swagger.client.api.ResultsApi;
import com.neotys.ascode.swagger.client.model.*;

import org.junit.Test;
import org.junit.Ignore;


/**
 * API tests for ResultsApi
 */
@Ignore
public class ResultsApiTest {

    private final ResultsApi api = new ResultsApi();



    /**
     * Deletes a test result
     *
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTestTest() throws ApiException {
        
        String testId = null;
        
        api.deleteTest(testId);

        // TODO: test validations
    }
    
    /**
     * Test result description
     *
     * Provides a test result description using a unique test identifier. Provides name, dates, owner ...
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestTest() throws ApiException {
        
        String testId = null;
        
        TestDefinition response = api.getTest(testId);

        // TODO: test validations
    }
    
    /**
     * Test elements
     *
     * Provides the tests elements of a test result. The elements type must be provided.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsTest() throws ApiException {
        
        String testId = null;
        
        String category = null;
        
        ArrayOfElementDefinition response = api.getTestElements(testId, category);

        // TODO: test validations
    }
    
    /**
     * Tests elements points since the beginning of the test
     *
     * Provides all the ponits of a test element for the selected statistics.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsPointsTest() throws ApiException {
        
        String testId = null;
        
        String elementId = null;
        
        String statistics = null;
        
        Points response = api.getTestElementsPoints(testId, elementId, statistics);

        // TODO: test validations
    }
    
    /**
     * Test elements SLA status since the beginning of the test
     *
     * Provides the SLA status of a test element.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsSlaTest() throws ApiException {
        
        String testId = null;
        
        String elementId = null;
        
        Sla response = api.getTestElementsSla(testId, elementId);

        // TODO: test validations
    }
    
    /**
     * Test elements values
     *
     * Provides the values of a test element.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestElementsValuesTest() throws ApiException {
        
        String testId = null;
        
        String elementId = null;
        
        ElementValues response = api.getTestElementsValues(testId, elementId);

        // TODO: test validations
    }
    @Test
    public void testpoints()
    {

        ApiClient apiClient=new ApiClient();
        String token="15304f743f34ca33c458927a40945b7424a2066b95563774";
        String testId="c09da065-3f4c-4fb4-b32c-928dd1a9e245";
        String elementId = "3624ac1a-94b5-434a-aa39-c287b5286b1d"; // String | Unique identifier representing a specific element.

        String statistics = "AVG_DURATION"; // String | Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).<br/> Example: AVG_DURATION,ELEMENTS_PER_SECOND

        try {

            apiClient.setApiKey(token);
            apiClient.setBasePath("https://neoload-api.saas.neotys.com/v1");

            ResultsApi apiInstance = new ResultsApi(apiClient);


            Points result = apiInstance.getTestElementsPoints(testId, elementId, statistics);

                   /*result.forEach(n -> {

                   n.getClass()

                   });*/

            result.forEach(point -> {
                System.out.println(String.valueOf(point.getAVGDURATION()));
            });

        } catch (ApiException e) {

            System.err.println("Exception when calling ResultsApi#getTestElementsPoints");

            e.printStackTrace();

        }
    }
    /**
     * Test monitors
     *
     * Provides all the tests counters of all monitors for a test result.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestMonitorsTest() throws ApiException {
        
        String testId = null;

        ArrayOfCounterDefinition response = api.getTestMonitors(testId);

        // TODO: test validations
    }
    
    /**
     * Tests monitors points
     *
     * Provides all the points of a test counter. The values are the average on the specified interval.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestMonitorsPointsTest() throws ApiException {
        
        String testId = null;
        
        String counterId = null;
        
        Points response = api.getTestMonitorsPoints(testId, counterId);

        // TODO: test validations
    }
    
    /**
     * Tests monitors values
     *
     * Provides the values of a test counter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestMonitorsValuesTest() throws ApiException {
        
        String testId = null;
        
        String counterId = null;
        
        CounterValues response = api.getTestMonitorsValues(testId, counterId);

        // TODO: test validations
    }
    
    /**
     * Test result main statistics
     *
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a finished test, those are average for the all test.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestStatisticsTest() throws ApiException {
        
        String testId = null;
        
        TestStatistics response = api.getTestStatistics(testId);

        // TODO: test validations
    }
    
    /**
     * Lists test results
     *
     * Lists the test results of the Account according to the method parameters.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestsTest() throws ApiException {
        
        String status = null;
        
        String project = null;
        
        String author = null;
        
        Integer limit = null;
        
        Integer offset = null;
        
        String fields = null;
        
        Boolean pretty = null;
        String sort = null;
        
        ArrayOfTestDefinition response = api.getTests(status, project, author, limit, offset, sort,fields, pretty);

        // TODO: test validations
    }
    
    /**
     * Create custom monitors
     *
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;The timestamp is an epoch time in seconds. It must be after the beginning of the test and not more than 10 minutes in the future.&lt;/li&gt;   &lt;li&gt;&#x27;|&#x27; character is not allowed in name and path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postTestMonitorsTest() throws ApiException {
        
        MonitorPostRequest body = null;
        
        String testId = null;
        
        api.postTestMonitors(body, testId);

        // TODO: test validations
    }
    
    /**
     * Update a test result
     *
     * Updates a test result with new name, description or quality status.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTestTest() throws ApiException {
        
        TestUpdateRequest body = null;
        
        String testId = null;
        
        TestDefinition response = api.updateTest(body, testId);

        // TODO: test validations
    }
    
}

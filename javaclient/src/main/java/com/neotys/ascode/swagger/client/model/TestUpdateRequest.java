/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.neotys.ascode.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * TestUpdateRequest
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2018-09-05T15:48:08.071+02:00[Europe/Paris]")
public class TestUpdateRequest {

  @SerializedName("name")
  private String name = null;
  
  @SerializedName("description")
  private String description = null;
  
  /**
   * Quality status of the test.
   */
  @JsonAdapter(QualityStatusEnum.Adapter.class)
  public enum QualityStatusEnum {
    
    PASSED("PASSED"),
    FAILED("FAILED");

    private String value;

    QualityStatusEnum(String value) {
      this.value = value;
    }
    
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    
    public static QualityStatusEnum fromValue(String text) {
      for (QualityStatusEnum b : QualityStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    
    public static class Adapter extends TypeAdapter<QualityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QualityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QualityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return QualityStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  
  @SerializedName("qualityStatus")
  private QualityStatusEnum qualityStatus = null;
  
  public TestUpdateRequest name(String name) {
    this.name = name;
    return this;
  }

  
  /**
  * Name of the test.
  * @return name
  **/
  
  
  @Schema(description = "Name of the test.")
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }
  
  public TestUpdateRequest description(String description) {
    this.description = description;
    return this;
  }

  
  /**
  * Description of the test.
  * @return description
  **/
  
  
  @Schema(description = "Description of the test.")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  
  public TestUpdateRequest qualityStatus(QualityStatusEnum qualityStatus) {
    this.qualityStatus = qualityStatus;
    return this;
  }

  
  /**
  * Quality status of the test.
  * @return qualityStatus
  **/
  
  
  @Schema(description = "Quality status of the test.")
  public QualityStatusEnum getQualityStatus() {
    return qualityStatus;
  }
  public void setQualityStatus(QualityStatusEnum qualityStatus) {
    this.qualityStatus = qualityStatus;
  }
  
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestUpdateRequest testUpdateRequest = (TestUpdateRequest) o;
    return Objects.equals(this.name, testUpdateRequest.name) &&
        Objects.equals(this.description, testUpdateRequest.description) &&
        Objects.equals(this.qualityStatus, testUpdateRequest.qualityStatus);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(name, description, qualityStatus);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestUpdateRequest {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    qualityStatus: ").append(toIndentedString(qualityStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}




pipeline {
  agent none
  stages {
  stage('Checkout') {
        agent { label 'master' }
        steps {
          git  'docker-compose -f neoload/lg/docker-compose.yml up -d'
          stash includes: 'neoload/lg/lg.yaml', name: 'LG'
          stash includes: 'neoload/test/scenario.yaml', name: 'scenario'
        }
      }
    stage('Start NeoLoad infrastructure') {
      agent { label 'master' }
      steps {
        sh 'docker-compose -f neoload/lg/docker-compose.yml up -d'
        stash includes: 'neoload/lg/lg.yaml', name: 'LG'
        stash includes: 'neoload/test/scenario.yaml', name: 'scenario'
      }
    }
    stage('Component Tests') {
      agent {
        dockerfile {
          args '--user root -v /tmp:/tmp --network cpv'
          dir 'neoload/controller'
        }
      }
      steps {
        git(branch: 'develop',
            url: 'https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/CPVWeatherCrisis',
            credentialsId: 'CodeCommit')
        unstash 'LG'
        unstash 'scenario'
        script {
          neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
            project: "$WORKSPACE/CPVWeatherCrisis.nlp",
            testName: 'Pipeline API Limit Test (build ${BUILD_NUMBER})',
            testDescription: 'WeatherCrisis API Limit Testing (Mysql + Rest API) through pipeline',
            commandLineOption: "-project $WORKSPACE/neoload/test/scenario.yaml -nlweb -loadGenerators $WORKSPACE/neoload/lg/lg.yaml -nlwebToken a8e8f0c5a4f90c02bfddcb6881e7f6811da26864879a7bd6",
            scenario: 'API Limit Test', sharedLicense: [server: 'NeoLoad Demo License', duration: 2, vuCount: 50],
            trendGraphs: [
                [name: 'API Response time', curve: ['Component Testing_REST>Actions>API 10 calls>REST API call'], statistic: 'average'],
                [name: 'MySQL Response time (Select a post)', curve: ['Component Testing_MySQL>Actions>MySQL'], statistic: 'average'],
                'ErrorRate'
                ]
          }
          script {
            neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
              project: "$WORKSPACE/CPVWeatherCrisis.nlp",
              testName: 'Pipeline API Nominal Test (build ${BUILD_NUMBER})',
              testDescription: 'WeatherCrisis API Nomonal Testing (Mysql + Rest API) through pipeline',
              commandLineOption: "-project $WORKSPACE/neoload/test/scenario.yaml -nlweb -loadGenerators $WORKSPACE/neoload/lg/lg.yaml -nlwebToken a8e8f0c5a4f90c02bfddcb6881e7f6811da26864879a7bd6",
              scenario: 'API Nominal Test', sharedLicense: [server: 'NeoLoad Demo License', duration: 2, vuCount: 50],
              trendGraphs: [
                  [name: 'API Response time', curve: ['Component Testing_REST>Actions>API 10 calls>REST API call'], statistic: 'average'],
                  [name: 'MySQL Response time (Select a post)', curve: ['Component Testing_MySQL>Actions>MySQL'], statistic: 'average'],
                  'ErrorRate'
                  ]
            }
      }
    }
    stage('Post Test') {
      agent {
        dockerfile {
          args '--user root -v /tmp:/tmp --network cpv'
          dir 'neoload/controller'
        }
      }
      steps {
        git(branch: 'develop',
            url: 'https://git-codecommit.eu-west-1.amazonaws.com/v1/repos/CPVWeatherCrisis',
            credentialsId: 'CodeCommit')
        unstash 'LG'
        unstash 'scenario'
        script {
          neoloadRun executable: '/home/neoload/neoload/bin/NeoLoadCmd',
            project: "$WORKSPACE/CPVWeatherCrisis.nlp",
            testName: 'Pipeline Post Test (build ${BUILD_NUMBER})',
            testDescription: 'WeatherCrisis API Testing (Mysql + Rest API) through pipeline',
            commandLineOption: "-nlweb -loadGenerators $WORKSPACE/neoload/lg/lg.yaml -nlwebToken a8e8f0c5a4f90c02bfddcb6881e7f6811da26864879a7bd6",
            scenario: 'post', sharedLicense: [server: 'NeoLoad Demo License', duration: 2, vuCount: 50],
            trendGraphs: [
                'ErrorRate'
                ]
          }
      }
    }
    stage('Stop NeoLoad infrastructure') {
      agent { label 'master' }
      steps {
        sh 'docker-compose -f neoload/lg/docker-compose.yml down'
      }
    }
  }
}

/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.neotys.ascode.api.v3.client.api;

import com.neotys.ascode.api.v3.client.ApiCallback;
import com.neotys.ascode.api.v3.client.ApiClient;
import com.neotys.ascode.api.v3.client.ApiException;
import com.neotys.ascode.api.v3.client.ApiResponse;
import com.neotys.ascode.api.v3.client.Configuration;
import com.neotys.ascode.api.v3.client.Pair;
import com.neotys.ascode.api.v3.client.ProgressRequestBody;
import com.neotys.ascode.api.v3.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.neotys.ascode.api.v3.client.model.ArrayOfElementDefinition;
import com.neotys.ascode.api.v3.client.model.ArrayOfEventDefinition;
import com.neotys.ascode.api.v3.client.model.ArrayOfSLAGlobalIndicatorDefinition;
import com.neotys.ascode.api.v3.client.model.ArrayOfSLAPerIntervalDefinition;
import com.neotys.ascode.api.v3.client.model.ArrayOfSLAPerTestResultDefinition;
import com.neotys.ascode.api.v3.client.model.ArrayOfTestResultDefinition;
import com.neotys.ascode.api.v3.client.model.CounterDefinition;
import com.neotys.ascode.api.v3.client.model.CounterDefinitionArray;
import com.neotys.ascode.api.v3.client.model.CounterValues;
import com.neotys.ascode.api.v3.client.model.ElementDefinition;
import com.neotys.ascode.api.v3.client.model.ElementValues;
import com.neotys.ascode.api.v3.client.model.Error;
import com.neotys.ascode.api.v3.client.model.EventType;
import java.io.File;
import com.neotys.ascode.api.v3.client.model.InlineResponse200;
import com.neotys.ascode.api.v3.client.model.MonitorPostRequest;
import com.neotys.ascode.api.v3.client.model.Percentiles;
import com.neotys.ascode.api.v3.client.model.Points;
import com.neotys.ascode.api.v3.client.model.RateLimitError;
import com.neotys.ascode.api.v3.client.model.Sla;
import com.neotys.ascode.api.v3.client.model.TestResultDefinition;
import com.neotys.ascode.api.v3.client.model.TestResultRasterConfiguration;
import com.neotys.ascode.api.v3.client.model.TestResultRasterMultiConfiguration;
import com.neotys.ascode.api.v3.client.model.TestResultStatistics;
import com.neotys.ascode.api.v3.client.model.TestResultStopRequest;
import com.neotys.ascode.api.v3.client.model.TestResultUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResultsApi {
    private ApiClient apiClient;

    public ResultsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResultsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteTestResult
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteTestResultCall(String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteTestResultValidateBeforeCall(String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling deleteTestResult(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling deleteTestResult(Async)");
        }

        com.squareup.okhttp.Call call = deleteTestResultCall(workspaceId, resultId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Deletes a test result
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteTestResult(String workspaceId, String resultId) throws ApiException {
        deleteTestResultWithHttpInfo(workspaceId, resultId);
    }

    /**
     * Deletes a test result
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteTestResultWithHttpInfo(String workspaceId, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = deleteTestResultValidateBeforeCall(workspaceId, resultId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a test result (asynchronously)
     * Deletes a test result and all the associated statistics. This action cannot be undone.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteTestResultAsync(String workspaceId, String resultId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteTestResultValidateBeforeCall(workspaceId, resultId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getTestResult
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultCall(String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultValidateBeforeCall(String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResult(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResult(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultCall(workspaceId, resultId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result description
     * Provides a test result description using a unique test result identifier. Provides name, dates, owner ...
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return TestResultDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestResultDefinition getTestResult(String workspaceId, String resultId) throws ApiException {
        ApiResponse<TestResultDefinition> resp = getTestResultWithHttpInfo(workspaceId, resultId);
        return resp.getData();
    }

    /**
     * Test result description
     * Provides a test result description using a unique test result identifier. Provides name, dates, owner ...
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;TestResultDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestResultDefinition> getTestResultWithHttpInfo(String workspaceId, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultValidateBeforeCall(workspaceId, resultId, null, null);
        Type localVarReturnType = new TypeToken<TestResultDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result description (asynchronously)
     * Provides a test result description using a unique test result identifier. Provides name, dates, owner ...
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultAsync(String workspaceId, String resultId, final ApiCallback<TestResultDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultValidateBeforeCall(workspaceId, resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestResultDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultElementDefinition
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementDefinitionCall(String workspaceId, String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/elements/{elementId}"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
                .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultElementDefinitionValidateBeforeCall(String workspaceId, String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultElementDefinition(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultElementDefinition(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestResultElementDefinition(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultElementDefinitionCall(workspaceId, resultId, elementId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result element definition
     * Provides a test result element definition.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ElementDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElementDefinition getTestResultElementDefinition(String workspaceId, String resultId, String elementId) throws ApiException {
        ApiResponse<ElementDefinition> resp = getTestResultElementDefinitionWithHttpInfo(workspaceId, resultId, elementId);
        return resp.getData();
    }

    /**
     * Test result element definition
     * Provides a test result element definition.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;ElementDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElementDefinition> getTestResultElementDefinitionWithHttpInfo(String workspaceId, String resultId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultElementDefinitionValidateBeforeCall(workspaceId, resultId, elementId, null, null);
        Type localVarReturnType = new TypeToken<ElementDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result element definition (asynchronously)
     * Provides a test result element definition.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementDefinitionAsync(String workspaceId, String resultId, String elementId, final ApiCallback<ElementDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultElementDefinitionValidateBeforeCall(workspaceId, resultId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElementDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultElements
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param category Category of the elements to return. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsCall(String workspaceId, String resultId, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/elements"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (category != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultElementsValidateBeforeCall(String workspaceId, String resultId, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultElements(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultElements(Async)");
        }
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getTestResultElements(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultElementsCall(workspaceId, resultId, category, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result elements
     * Provides the tests elements of a test result. The elements type must be provided.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param category Category of the elements to return. (required)
     * @return ArrayOfElementDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfElementDefinition getTestResultElements(String workspaceId, String resultId, String category) throws ApiException {
        ApiResponse<ArrayOfElementDefinition> resp = getTestResultElementsWithHttpInfo(workspaceId, resultId, category);
        return resp.getData();
    }

    /**
     * Test result elements
     * Provides the tests elements of a test result. The elements type must be provided.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param category Category of the elements to return. (required)
     * @return ApiResponse&lt;ArrayOfElementDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfElementDefinition> getTestResultElementsWithHttpInfo(String workspaceId, String resultId, String category) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultElementsValidateBeforeCall(workspaceId, resultId, category, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfElementDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result elements (asynchronously)
     * Provides the tests elements of a test result. The elements type must be provided.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param category Category of the elements to return. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsAsync(String workspaceId, String resultId, String category, final ApiCallback<ArrayOfElementDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultElementsValidateBeforeCall(workspaceId, resultId, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfElementDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultElementsPercentiles
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsPercentilesCall(String workspaceId, String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/elements/{elementId}/percentiles"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
                .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultElementsPercentilesValidateBeforeCall(String workspaceId, String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultElementsPercentiles(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultElementsPercentiles(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestResultElementsPercentiles(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultElementsPercentilesCall(workspaceId, resultId, elementId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result percentiles transaction since the beginning of the test result
     * Provides the percentiles of a test result transaction.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return Percentiles
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Percentiles getTestResultElementsPercentiles(String workspaceId, String resultId, String elementId) throws ApiException {
        ApiResponse<Percentiles> resp = getTestResultElementsPercentilesWithHttpInfo(workspaceId, resultId, elementId);
        return resp.getData();
    }

    /**
     * Test result percentiles transaction since the beginning of the test result
     * Provides the percentiles of a test result transaction.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;Percentiles&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Percentiles> getTestResultElementsPercentilesWithHttpInfo(String workspaceId, String resultId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultElementsPercentilesValidateBeforeCall(workspaceId, resultId, elementId, null, null);
        Type localVarReturnType = new TypeToken<Percentiles>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result percentiles transaction since the beginning of the test result (asynchronously)
     * Provides the percentiles of a test result transaction.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsPercentilesAsync(String workspaceId, String resultId, String elementId, final ApiCallback<Percentiles> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultElementsPercentilesValidateBeforeCall(workspaceId, resultId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Percentiles>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultElementsPoints
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).&lt;br/&gt; Example: AVG_DURATION,ELEMENTS_PER_SECOND (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsPointsCall(String workspaceId, String resultId, String elementId, String statistics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/elements/{elementId}/points"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
                .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (statistics != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("statistics", statistics));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultElementsPointsValidateBeforeCall(String workspaceId, String resultId, String elementId, String statistics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultElementsPoints(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultElementsPoints(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestResultElementsPoints(Async)");
        }
        // verify the required parameter 'statistics' is set
        if (statistics == null) {
            throw new ApiException("Missing the required parameter 'statistics' when calling getTestResultElementsPoints(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultElementsPointsCall(workspaceId, resultId, elementId, statistics, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test results elements points since the beginning of the test result
     * Provides all the points of a test result element for the selected statistics.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).&lt;br/&gt; Example: AVG_DURATION,ELEMENTS_PER_SECOND (required)
     * @return Points
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Points getTestResultElementsPoints(String workspaceId, String resultId, String elementId, String statistics) throws ApiException {
        ApiResponse<Points> resp = getTestResultElementsPointsWithHttpInfo(workspaceId, resultId, elementId, statistics);
        return resp.getData();
    }

    /**
     * Test results elements points since the beginning of the test result
     * Provides all the points of a test result element for the selected statistics.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).&lt;br/&gt; Example: AVG_DURATION,ELEMENTS_PER_SECOND (required)
     * @return ApiResponse&lt;Points&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Points> getTestResultElementsPointsWithHttpInfo(String workspaceId, String resultId, String elementId, String statistics) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultElementsPointsValidateBeforeCall(workspaceId, resultId, elementId, statistics, null, null);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test results elements points since the beginning of the test result (asynchronously)
     * Provides all the points of a test result element for the selected statistics.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma-separated list of statistics to get. Available statistics are: AVG_DURATION (ms), MIN_DURATION (ms), MAX_DURATION (ms), COUNT, THROUGHPUT (Byte/s), ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE (%), AVG_TTFB (ms), MIN_TTFB (ms), MAX_TTFB (ms).&lt;br/&gt; Example: AVG_DURATION,ELEMENTS_PER_SECOND (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsPointsAsync(String workspaceId, String resultId, String elementId, String statistics, final ApiCallback<Points> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultElementsPointsValidateBeforeCall(workspaceId, resultId, elementId, statistics, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultElementsSla
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsSlaCall(String workspaceId, String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/elements/{elementId}/sla"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
                .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultElementsSlaValidateBeforeCall(String workspaceId, String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultElementsSla(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultElementsSla(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestResultElementsSla(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultElementsSlaCall(workspaceId, resultId, elementId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result elements SLA status since the beginning of the test result
     * Provides the SLA status of a test result element.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return Sla
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Sla getTestResultElementsSla(String workspaceId, String resultId, String elementId) throws ApiException {
        ApiResponse<Sla> resp = getTestResultElementsSlaWithHttpInfo(workspaceId, resultId, elementId);
        return resp.getData();
    }

    /**
     * Test result elements SLA status since the beginning of the test result
     * Provides the SLA status of a test result element.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;Sla&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Sla> getTestResultElementsSlaWithHttpInfo(String workspaceId, String resultId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultElementsSlaValidateBeforeCall(workspaceId, resultId, elementId, null, null);
        Type localVarReturnType = new TypeToken<Sla>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result elements SLA status since the beginning of the test result (asynchronously)
     * Provides the SLA status of a test result element.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsSlaAsync(String workspaceId, String resultId, String elementId, final ApiCallback<Sla> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultElementsSlaValidateBeforeCall(workspaceId, resultId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Sla>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultElementsValues
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsValuesCall(String workspaceId, String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/elements/{elementId}/values"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
                .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultElementsValuesValidateBeforeCall(String workspaceId, String resultId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultElementsValues(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultElementsValues(Async)");
        }
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestResultElementsValues(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultElementsValuesCall(workspaceId, resultId, elementId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result elements values
     * Provides the values of a test result element.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ElementValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElementValues getTestResultElementsValues(String workspaceId, String resultId, String elementId) throws ApiException {
        ApiResponse<ElementValues> resp = getTestResultElementsValuesWithHttpInfo(workspaceId, resultId, elementId);
        return resp.getData();
    }

    /**
     * Test result elements values
     * Provides the values of a test result element.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;ElementValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElementValues> getTestResultElementsValuesWithHttpInfo(String workspaceId, String resultId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultElementsValuesValidateBeforeCall(workspaceId, resultId, elementId, null, null);
        Type localVarReturnType = new TypeToken<ElementValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result elements values (asynchronously)
     * Provides the values of a test result element.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultElementsValuesAsync(String workspaceId, String resultId, String elementId, final ApiCallback<ElementValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultElementsValuesValidateBeforeCall(workspaceId, resultId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElementValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultEvents
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param types The types of the events you expect to get. It will return all the types if the field is left empty. (Ctrl+click to select multiple values)  (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultEventsCall(String workspaceId, String resultId, List<EventType> types, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/events"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (types != null)
            localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "types", types));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sort != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultEventsValidateBeforeCall(String workspaceId, String resultId, List<EventType> types, Integer limit, Integer offset, String sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultEvents(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultEvents(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultEventsCall(workspaceId, resultId, types, limit, offset, sort, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result events
     * List the events of the specified test result according to the method parameters. ___ *Sortable fields :*   - offset   - fullname   - code   - source 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param types The types of the events you expect to get. It will return all the types if the field is left empty. (Ctrl+click to select multiple values)  (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @return ArrayOfEventDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfEventDefinition getTestResultEvents(String workspaceId, String resultId, List<EventType> types, Integer limit, Integer offset, String sort) throws ApiException {
        ApiResponse<ArrayOfEventDefinition> resp = getTestResultEventsWithHttpInfo(workspaceId, resultId, types, limit, offset, sort);
        return resp.getData();
    }

    /**
     * Test result events
     * List the events of the specified test result according to the method parameters. ___ *Sortable fields :*   - offset   - fullname   - code   - source 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param types The types of the events you expect to get. It will return all the types if the field is left empty. (Ctrl+click to select multiple values)  (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @return ApiResponse&lt;ArrayOfEventDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfEventDefinition> getTestResultEventsWithHttpInfo(String workspaceId, String resultId, List<EventType> types, Integer limit, Integer offset, String sort) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultEventsValidateBeforeCall(workspaceId, resultId, types, limit, offset, sort, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfEventDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result events (asynchronously)
     * List the events of the specified test result according to the method parameters. ___ *Sortable fields :*   - offset   - fullname   - code   - source 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param types The types of the events you expect to get. It will return all the types if the field is left empty. (Ctrl+click to select multiple values)  (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultEventsAsync(String workspaceId, String resultId, List<EventType> types, Integer limit, Integer offset, String sort, final ApiCallback<ArrayOfEventDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultEventsValidateBeforeCall(workspaceId, resultId, types, limit, offset, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfEventDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultGraph
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultGraphCall(String workspaceId, String resultId, TestResultRasterConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/graph"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "image/png", "image/jpeg", "image/tiff", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultGraphValidateBeforeCall(String workspaceId, String resultId, TestResultRasterConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultGraph(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultGraph(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultGraphCall(workspaceId, resultId, body, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result Graph
     * Provides a graph from some stats of a test result.  Element statistics can be mixed with monitor statistics. Only limitation is around PERCENTILES_DURATION element statistic that cannot be mixed with other element statistics neither with monitor statistics. 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param body  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getTestResultGraph(String workspaceId, String resultId, TestResultRasterConfiguration body) throws ApiException {
        ApiResponse<File> resp = getTestResultGraphWithHttpInfo(workspaceId, resultId, body);
        return resp.getData();
    }

    /**
     * Test result Graph
     * Provides a graph from some stats of a test result.  Element statistics can be mixed with monitor statistics. Only limitation is around PERCENTILES_DURATION element statistic that cannot be mixed with other element statistics neither with monitor statistics. 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getTestResultGraphWithHttpInfo(String workspaceId, String resultId, TestResultRasterConfiguration body) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultGraphValidateBeforeCall(workspaceId, resultId, body, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result Graph (asynchronously)
     * Provides a graph from some stats of a test result.  Element statistics can be mixed with monitor statistics. Only limitation is around PERCENTILES_DURATION element statistic that cannot be mixed with other element statistics neither with monitor statistics. 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultGraphAsync(String workspaceId, String resultId, TestResultRasterConfiguration body, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultGraphValidateBeforeCall(workspaceId, resultId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultList
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param status Returns only the test results with the specified status. (optional)
     * @param project Project name. Returns only the test results of the specified project. (optional)
     * @param author The author of the test result. Returns only the test results launched by the specified author. (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param fields Comma-separated list of fields to include in the json test result definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultListCall(String workspaceId, String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (project != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("project", project));
        if (author != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("author", author));
        if (limit != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (offset != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (sort != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("sort", sort));
        if (fields != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("fields", fields));
        if (pretty != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("pretty", pretty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultListValidateBeforeCall(String workspaceId, String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultList(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultListCall(workspaceId, status, project, author, limit, offset, sort, fields, pretty, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Lists test results
     * Lists the test results of the Workspace according to the method parameters. ___ *Sortable fields :*   - name   - project   - startDate (descending sort by default : the most recent first)   - qualityStatus 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param status Returns only the test results with the specified status. (optional)
     * @param project Project name. Returns only the test results of the specified project. (optional)
     * @param author The author of the test result. Returns only the test results launched by the specified author. (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param fields Comma-separated list of fields to include in the json test result definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @return ArrayOfTestResultDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfTestResultDefinition getTestResultList(String workspaceId, String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty) throws ApiException {
        ApiResponse<ArrayOfTestResultDefinition> resp = getTestResultListWithHttpInfo(workspaceId, status, project, author, limit, offset, sort, fields, pretty);
        return resp.getData();
    }

    /**
     * Lists test results
     * Lists the test results of the Workspace according to the method parameters. ___ *Sortable fields :*   - name   - project   - startDate (descending sort by default : the most recent first)   - qualityStatus 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param status Returns only the test results with the specified status. (optional)
     * @param project Project name. Returns only the test results of the specified project. (optional)
     * @param author The author of the test result. Returns only the test results launched by the specified author. (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param fields Comma-separated list of fields to include in the json test result definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @return ApiResponse&lt;ArrayOfTestResultDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfTestResultDefinition> getTestResultListWithHttpInfo(String workspaceId, String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultListValidateBeforeCall(workspaceId, status, project, author, limit, offset, sort, fields, pretty, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfTestResultDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lists test results (asynchronously)
     * Lists the test results of the Workspace according to the method parameters. ___ *Sortable fields :*   - name   - project   - startDate (descending sort by default : the most recent first)   - qualityStatus 
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param status Returns only the test results with the specified status. (optional)
     * @param project Project name. Returns only the test results of the specified project. (optional)
     * @param author The author of the test result. Returns only the test results launched by the specified author. (optional)
     * @param limit The maximum number of elements returned by this call. The maximum must be less than or equal to 200. (optional, default to 50)
     * @param offset The offset of the first element to return. Starting at this offset, the query will return a maximum of &#x27;limit&#x27; elements. (optional, default to 0)
     * @param sort The key to sort the elements on. It may begin with a &#x27;+&#x27; or a &#x27;-&#x27; to specify an ascending or descending sort order. The list of available keys can be found in the endpoint description. (optional)
     * @param fields Comma-separated list of fields to include in the json test result definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultListAsync(String workspaceId, String status, String project, String author, Integer limit, Integer offset, String sort, String fields, Boolean pretty, final ApiCallback<ArrayOfTestResultDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultListValidateBeforeCall(workspaceId, status, project, author, limit, offset, sort, fields, pretty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfTestResultDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultMonitorDefinition
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultMonitorDefinitionCall(String workspaceId, String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/monitors/{counterId}"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
                .replaceAll("\\{" + "counterId" + "\\}", apiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultMonitorDefinitionValidateBeforeCall(String workspaceId, String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultMonitorDefinition(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultMonitorDefinition(Async)");
        }
        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling getTestResultMonitorDefinition(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultMonitorDefinitionCall(workspaceId, resultId, counterId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result counter definition
     * Provides the definition of a test result counter.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return CounterDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CounterDefinition getTestResultMonitorDefinition(String workspaceId, String resultId, String counterId) throws ApiException {
        ApiResponse<CounterDefinition> resp = getTestResultMonitorDefinitionWithHttpInfo(workspaceId, resultId, counterId);
        return resp.getData();
    }

    /**
     * Test result counter definition
     * Provides the definition of a test result counter.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return ApiResponse&lt;CounterDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CounterDefinition> getTestResultMonitorDefinitionWithHttpInfo(String workspaceId, String resultId, String counterId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultMonitorDefinitionValidateBeforeCall(workspaceId, resultId, counterId, null, null);
        Type localVarReturnType = new TypeToken<CounterDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result counter definition (asynchronously)
     * Provides the definition of a test result counter.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultMonitorDefinitionAsync(String workspaceId, String resultId, String counterId, final ApiCallback<CounterDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultMonitorDefinitionValidateBeforeCall(workspaceId, resultId, counterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CounterDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultMonitors
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultMonitorsCall(String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/monitors"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultMonitorsValidateBeforeCall(String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultMonitors(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultMonitors(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultMonitorsCall(workspaceId, resultId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result monitors
     * Provides all the test result counters of all monitors for a test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return CounterDefinitionArray
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CounterDefinitionArray getTestResultMonitors(String workspaceId, String resultId) throws ApiException {
        ApiResponse<CounterDefinitionArray> resp = getTestResultMonitorsWithHttpInfo(workspaceId, resultId);
        return resp.getData();
    }

    /**
     * Test result monitors
     * Provides all the test result counters of all monitors for a test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;CounterDefinitionArray&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CounterDefinitionArray> getTestResultMonitorsWithHttpInfo(String workspaceId, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultMonitorsValidateBeforeCall(workspaceId, resultId, null, null);
        Type localVarReturnType = new TypeToken<CounterDefinitionArray>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result monitors (asynchronously)
     * Provides all the test result counters of all monitors for a test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultMonitorsAsync(String workspaceId, String resultId, final ApiCallback<CounterDefinitionArray> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultMonitorsValidateBeforeCall(workspaceId, resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CounterDefinitionArray>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultMonitorsPoints
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultMonitorsPointsCall(String workspaceId, String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/monitors/{counterId}/points"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
                .replaceAll("\\{" + "counterId" + "\\}", apiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultMonitorsPointsValidateBeforeCall(String workspaceId, String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultMonitorsPoints(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultMonitorsPoints(Async)");
        }
        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling getTestResultMonitorsPoints(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultMonitorsPointsCall(workspaceId, resultId, counterId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result monitors points
     * Provides all the points of a test result counter. The values are the average on the specified interval.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return Points
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Points getTestResultMonitorsPoints(String workspaceId, String resultId, String counterId) throws ApiException {
        ApiResponse<Points> resp = getTestResultMonitorsPointsWithHttpInfo(workspaceId, resultId, counterId);
        return resp.getData();
    }

    /**
     * Test result monitors points
     * Provides all the points of a test result counter. The values are the average on the specified interval.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return ApiResponse&lt;Points&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Points> getTestResultMonitorsPointsWithHttpInfo(String workspaceId, String resultId, String counterId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultMonitorsPointsValidateBeforeCall(workspaceId, resultId, counterId, null, null);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result monitors points (asynchronously)
     * Provides all the points of a test result counter. The values are the average on the specified interval.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultMonitorsPointsAsync(String workspaceId, String resultId, String counterId, final ApiCallback<Points> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultMonitorsPointsValidateBeforeCall(workspaceId, resultId, counterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultMonitorsValues
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultMonitorsValuesCall(String workspaceId, String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/monitors/{counterId}/values"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()))
                .replaceAll("\\{" + "counterId" + "\\}", apiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultMonitorsValuesValidateBeforeCall(String workspaceId, String resultId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultMonitorsValues(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultMonitorsValues(Async)");
        }
        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling getTestResultMonitorsValues(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultMonitorsValuesCall(workspaceId, resultId, counterId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result monitors values
     * Provides the values of a test result counter.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return CounterValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CounterValues getTestResultMonitorsValues(String workspaceId, String resultId, String counterId) throws ApiException {
        ApiResponse<CounterValues> resp = getTestResultMonitorsValuesWithHttpInfo(workspaceId, resultId, counterId);
        return resp.getData();
    }

    /**
     * Test result monitors values
     * Provides the values of a test result counter.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return ApiResponse&lt;CounterValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CounterValues> getTestResultMonitorsValuesWithHttpInfo(String workspaceId, String resultId, String counterId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultMonitorsValuesValidateBeforeCall(workspaceId, resultId, counterId, null, null);
        Type localVarReturnType = new TypeToken<CounterValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result monitors values (asynchronously)
     * Provides the values of a test result counter.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultMonitorsValuesAsync(String workspaceId, String resultId, String counterId, final ApiCallback<CounterValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultMonitorsValuesValidateBeforeCall(workspaceId, resultId, counterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CounterValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultMultiGraph
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultMultiGraphCall(String workspaceId, TestResultRasterMultiConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/graph"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "image/png", "image/jpeg", "image/tiff", "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultMultiGraphValidateBeforeCall(String workspaceId, TestResultRasterMultiConfiguration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultMultiGraph(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultMultiGraphCall(workspaceId, body, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test results MultiGraph
     * Provides a graph from some stats of some tests result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param body  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public File getTestResultMultiGraph(String workspaceId, TestResultRasterMultiConfiguration body) throws ApiException {
        ApiResponse<File> resp = getTestResultMultiGraphWithHttpInfo(workspaceId, body);
        return resp.getData();
    }

    /**
     * Test results MultiGraph
     * Provides a graph from some stats of some tests result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param body  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<File> getTestResultMultiGraphWithHttpInfo(String workspaceId, TestResultRasterMultiConfiguration body) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultMultiGraphValidateBeforeCall(workspaceId, body, null, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test results MultiGraph (asynchronously)
     * Provides a graph from some stats of some tests result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultMultiGraphAsync(String workspaceId, TestResultRasterMultiConfiguration body, final ApiCallback<File> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultMultiGraphValidateBeforeCall(workspaceId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultSLAGlobalIndicators
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultSLAGlobalIndicatorsCall(String workspaceId, String resultId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/slas/statistics"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultSLAGlobalIndicatorsValidateBeforeCall(String workspaceId, String resultId, String status, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultSLAGlobalIndicators(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultSLAGlobalIndicators(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultSLAGlobalIndicatorsCall(workspaceId, resultId, status, progressListener, progressRequestListener);
        return call;





    }

    /**
     * SLAs global indicators
     * Provides the SLAs global indicators of the test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @return ArrayOfSLAGlobalIndicatorDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfSLAGlobalIndicatorDefinition getTestResultSLAGlobalIndicators(String workspaceId, String resultId, String status) throws ApiException {
        ApiResponse<ArrayOfSLAGlobalIndicatorDefinition> resp = getTestResultSLAGlobalIndicatorsWithHttpInfo(workspaceId, resultId, status);
        return resp.getData();
    }

    /**
     * SLAs global indicators
     * Provides the SLAs global indicators of the test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @return ApiResponse&lt;ArrayOfSLAGlobalIndicatorDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfSLAGlobalIndicatorDefinition> getTestResultSLAGlobalIndicatorsWithHttpInfo(String workspaceId, String resultId, String status) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultSLAGlobalIndicatorsValidateBeforeCall(workspaceId, resultId, status, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfSLAGlobalIndicatorDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * SLAs global indicators (asynchronously)
     * Provides the SLAs global indicators of the test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultSLAGlobalIndicatorsAsync(String workspaceId, String resultId, String status, final ApiCallback<ArrayOfSLAGlobalIndicatorDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultSLAGlobalIndicatorsValidateBeforeCall(workspaceId, resultId, status, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfSLAGlobalIndicatorDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultSLAPerInterval
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultSLAPerIntervalCall(String workspaceId, String resultId, String status, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/slas/per-interval"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (category != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultSLAPerIntervalValidateBeforeCall(String workspaceId, String resultId, String status, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultSLAPerInterval(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultSLAPerInterval(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultSLAPerIntervalCall(workspaceId, resultId, status, category, progressListener, progressRequestListener);
        return call;





    }

    /**
     * SLAs per time interval
     * Provides the SLAs per time interval of a specific test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @return ArrayOfSLAPerIntervalDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfSLAPerIntervalDefinition getTestResultSLAPerInterval(String workspaceId, String resultId, String status, String category) throws ApiException {
        ApiResponse<ArrayOfSLAPerIntervalDefinition> resp = getTestResultSLAPerIntervalWithHttpInfo(workspaceId, resultId, status, category);
        return resp.getData();
    }

    /**
     * SLAs per time interval
     * Provides the SLAs per time interval of a specific test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @return ApiResponse&lt;ArrayOfSLAPerIntervalDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfSLAPerIntervalDefinition> getTestResultSLAPerIntervalWithHttpInfo(String workspaceId, String resultId, String status, String category) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultSLAPerIntervalValidateBeforeCall(workspaceId, resultId, status, category, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfSLAPerIntervalDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * SLAs per time interval (asynchronously)
     * Provides the SLAs per time interval of a specific test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultSLAPerIntervalAsync(String workspaceId, String resultId, String status, String category, final ApiCallback<ArrayOfSLAPerIntervalDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultSLAPerIntervalValidateBeforeCall(workspaceId, resultId, status, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfSLAPerIntervalDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultSLAPerTest
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultSLAPerTestCall(String workspaceId, String resultId, String status, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/slas/per-test"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        if (category != null)
            localVarQueryParams.addAll(apiClient.parameterToPair("category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultSLAPerTestValidateBeforeCall(String workspaceId, String resultId, String status, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultSLAPerTest(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultSLAPerTest(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultSLAPerTestCall(workspaceId, resultId, status, category, progressListener, progressRequestListener);
        return call;





    }

    /**
     * SLAs per test
     * Provides the SLAs per test of a specific test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @return ArrayOfSLAPerTestResultDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfSLAPerTestResultDefinition getTestResultSLAPerTest(String workspaceId, String resultId, String status, String category) throws ApiException {
        ApiResponse<ArrayOfSLAPerTestResultDefinition> resp = getTestResultSLAPerTestWithHttpInfo(workspaceId, resultId, status, category);
        return resp.getData();
    }

    /**
     * SLAs per test
     * Provides the SLAs per test of a specific test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @return ApiResponse&lt;ArrayOfSLAPerTestResultDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfSLAPerTestResultDefinition> getTestResultSLAPerTestWithHttpInfo(String workspaceId, String resultId, String status, String category) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultSLAPerTestValidateBeforeCall(workspaceId, resultId, status, category, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfSLAPerTestResultDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * SLAs per test (asynchronously)
     * Provides the SLAs per test of a specific test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param status The status of the element you expect to get the SLA for. It will return all the statuses if the field is left empty. (optional)
     * @param category The category of the element you expect to get the SLA for. It will return all the categories if the field is left empty. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultSLAPerTestAsync(String workspaceId, String resultId, String status, String category, final ApiCallback<ArrayOfSLAPerTestResultDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultSLAPerTestValidateBeforeCall(workspaceId, resultId, status, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfSLAPerTestResultDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestResultStatistics
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestResultStatisticsCall(String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/statistics"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {

        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTestResultStatisticsValidateBeforeCall(String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling getTestResultStatistics(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling getTestResultStatistics(Async)");
        }

        com.squareup.okhttp.Call call = getTestResultStatisticsCall(workspaceId, resultId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Test result main statistics
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a test result, those are average for the all test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return TestResultStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestResultStatistics getTestResultStatistics(String workspaceId, String resultId) throws ApiException {
        ApiResponse<TestResultStatistics> resp = getTestResultStatisticsWithHttpInfo(workspaceId, resultId);
        return resp.getData();
    }

    /**
     * Test result main statistics
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a test result, those are average for the all test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;TestResultStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestResultStatistics> getTestResultStatisticsWithHttpInfo(String workspaceId, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = getTestResultStatisticsValidateBeforeCall(workspaceId, resultId, null, null);
        Type localVarReturnType = new TypeToken<TestResultStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result main statistics (asynchronously)
     * Provides the main statistics of a test result. For a runnning test, these statistics are live, for a test result, those are average for the all test result.
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestResultStatisticsAsync(String workspaceId, String resultId, final ApiCallback<TestResultStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestResultStatisticsValidateBeforeCall(workspaceId, resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestResultStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postTestResultMonitors
     * @param body List of custom monitors (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postTestResultMonitorsCall(MonitorPostRequest body, String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/monitors"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postTestResultMonitorsValidateBeforeCall(MonitorPostRequest body, String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postTestResultMonitors(Async)");
        }
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling postTestResultMonitors(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling postTestResultMonitors(Async)");
        }

        com.squareup.okhttp.Call call = postTestResultMonitorsCall(body, workspaceId, resultId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Create custom monitors
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;&#x27;/&#x27; character is not allowed in path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     * @param body List of custom monitors (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void postTestResultMonitors(MonitorPostRequest body, String workspaceId, String resultId) throws ApiException {
        postTestResultMonitorsWithHttpInfo(body, workspaceId, resultId);
    }

    /**
     * Create custom monitors
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;&#x27;/&#x27; character is not allowed in path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     * @param body List of custom monitors (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> postTestResultMonitorsWithHttpInfo(MonitorPostRequest body, String workspaceId, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = postTestResultMonitorsValidateBeforeCall(body, workspaceId, resultId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create custom monitors (asynchronously)
     * Pushes monitoring data (external data) for a given running test. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Resolution limitation&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum resolution for a monitor value is &lt;b&gt;1 per second&lt;/b&gt;, otherwise &lt;b&gt;the first value is kept&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Maximum paths and monitors&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;Maximum 100 different &lt;b&gt;unique&lt;/b&gt; paths.&lt;/li&gt;   &lt;li&gt;Maximum 50 different monitors for a given path.&lt;/li&gt;   &lt;li&gt;Maximum length is 10 for a path.&lt;/li&gt; &lt;/ul&gt; &lt;b&gt;Other requirements&lt;/b&gt;: &lt;ul&gt;   &lt;li&gt;&#x27;/&#x27; character is not allowed in path element.&lt;/li&gt;   &lt;li&gt;The test must be &lt;b&gt;running&lt;/b&gt; while pushing the data.&lt;/li&gt;   &lt;li&gt;For a given timestamp, all monitors relative to a path must be sent in the same request.&lt;/li&gt;   &lt;li&gt;These elements must not be empty: &lt;b&gt;monitor name&lt;/b&gt;, &lt;b&gt;a path element&lt;/b&gt; and &lt;b&gt;values&lt;/b&gt;.&lt;/li&gt; &lt;/ul&gt; 
     * @param body List of custom monitors (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postTestResultMonitorsAsync(MonitorPostRequest body, String workspaceId, String resultId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postTestResultMonitorsValidateBeforeCall(body, workspaceId, resultId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for stopTestResult
     * @param body  (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call stopTestResultCall(TestResultStopRequest body, String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}/stop"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call stopTestResultValidateBeforeCall(TestResultStopRequest body, String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling stopTestResult(Async)");
        }
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling stopTestResult(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling stopTestResult(Async)");
        }

        com.squareup.okhttp.Call call = stopTestResultCall(body, workspaceId, resultId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Stop a running test result
     * Stop the running test result with the specified id
     * @param body  (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 stopTestResult(TestResultStopRequest body, String workspaceId, String resultId) throws ApiException {
        ApiResponse<InlineResponse200> resp = stopTestResultWithHttpInfo(body, workspaceId, resultId);
        return resp.getData();
    }

    /**
     * Stop a running test result
     * Stop the running test result with the specified id
     * @param body  (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> stopTestResultWithHttpInfo(TestResultStopRequest body, String workspaceId, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = stopTestResultValidateBeforeCall(body, workspaceId, resultId, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Stop a running test result (asynchronously)
     * Stop the running test result with the specified id
     * @param body  (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call stopTestResultAsync(TestResultStopRequest body, String workspaceId, String resultId, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = stopTestResultValidateBeforeCall(body, workspaceId, resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateTestResult
     * @param body  (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updateTestResultCall(TestResultUpdateRequest body, String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/workspaces/{workspaceId}/test-results/{resultId}"
                .replaceAll("\\{" + "workspaceId" + "\\}", apiClient.escapeString(workspaceId.toString()))
                .replaceAll("\\{" + "resultId" + "\\}", apiClient.escapeString(resultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updateTestResultValidateBeforeCall(TestResultUpdateRequest body, String workspaceId, String resultId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTestResult(Async)");
        }
        // verify the required parameter 'workspaceId' is set
        if (workspaceId == null) {
            throw new ApiException("Missing the required parameter 'workspaceId' when calling updateTestResult(Async)");
        }
        // verify the required parameter 'resultId' is set
        if (resultId == null) {
            throw new ApiException("Missing the required parameter 'resultId' when calling updateTestResult(Async)");
        }

        com.squareup.okhttp.Call call = updateTestResultCall(body, workspaceId, resultId, progressListener, progressRequestListener);
        return call;





    }

    /**
     * Update a test result
     * Updates a test result with new name, description or quality status.
     * @param body  (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return TestResultDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestResultDefinition updateTestResult(TestResultUpdateRequest body, String workspaceId, String resultId) throws ApiException {
        ApiResponse<TestResultDefinition> resp = updateTestResultWithHttpInfo(body, workspaceId, resultId);
        return resp.getData();
    }

    /**
     * Update a test result
     * Updates a test result with new name, description or quality status.
     * @param body  (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @return ApiResponse&lt;TestResultDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestResultDefinition> updateTestResultWithHttpInfo(TestResultUpdateRequest body, String workspaceId, String resultId) throws ApiException {
        com.squareup.okhttp.Call call = updateTestResultValidateBeforeCall(body, workspaceId, resultId, null, null);
        Type localVarReturnType = new TypeToken<TestResultDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a test result (asynchronously)
     * Updates a test result with new name, description or quality status.
     * @param body  (required)
     * @param workspaceId Unique identifier representing a Workspace. (required)
     * @param resultId Unique identifier representing a specific test result. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateTestResultAsync(TestResultUpdateRequest body, String workspaceId, String resultId, final ApiCallback<TestResultDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateTestResultValidateBeforeCall(body, workspaceId, resultId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestResultDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
